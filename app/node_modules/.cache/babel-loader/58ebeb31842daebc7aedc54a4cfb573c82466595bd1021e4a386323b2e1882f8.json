{"ast":null,"code":"var _jsxFileName = \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/plotdata_img.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst r_small = 5; // This will be unused as we switch to images\nconst r_big = 15; // This will be unused as we switch to images\n\n// Function to add opacity to hex colors, unchanged\nfunction addAlpha(color, opacity) {\n  var _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\n  return color.slice(0, 7) + _opacity.toString(16).toUpperCase();\n}\n\n// Function to get a specific column from a 2D array, unchanged\nconst getColumn = (arr, n) => arr.map(x => x[n]);\n\n// Your existing functions remain unchanged...\n\nfunction Scatterplot(props) {\n  _s();\n  var {\n    width,\n    height,\n    data,\n    labels,\n    colorCol,\n    jitter\n  } = props;\n  const margin = {\n    top: 100,\n    left: 120,\n    right: 80,\n    bottom: 100\n  };\n  const ref = useRef();\n  const [pieCharts, setPieCharts] = useState([]);\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll('*').remove(); // Clear SVG to prevent duplication\n\n    // Assuming the sprite sheet path\n    const spriteSheetPath = 'datasets/spritesheet.png';\n    const spriteSize = 450; // Size of each sprite\n    const spritePadding = 50; // Padding around each sprite\n    const totalSpriteSize = spriteSize + spritePadding; // Total size of each sprite cell in the sheet\n\n    // Set scales for the scatterplot\n    const xScale = d3.scaleLinear().domain([d3.min(data, d => d[0]), d3.max(data, d => d[0])]).range([margin.left, width - margin.right]);\n    const yScale = d3.scaleLinear().domain([d3.min(data, d => d[1]), d3.max(data, d => d[1])]).range([height - margin.bottom, margin.top]);\n\n    // Bind data to image elements\n    const images = svg.selectAll('image').data(data);\n\n    // Enter new images\n    images.enter().append('image').attr('xlink:href', spriteSheetPath).attr('x', d => xScale(d[0]) - spriteSize / 2).attr('y', d => yScale(d[1]) - spriteSize / 2).attr('width', spriteSize).attr('height', spriteSize).attr('clip-path', (d, i) => {\n      // Calculate column and row for this data point's image in the sprite sheet\n      const column = i % 10; // Example layout calculation\n      const row = Math.floor(i / 20); // Example layout calculation\n      // Calculate the x and y offset for the clip-path\n      const xOffset = column * totalSpriteSize + spritePadding;\n      const yOffset = row * totalSpriteSize + spritePadding;\n      // Use a unique clipPath id for each image to prevent overlap\n      const clipPathId = `clip-${i}`;\n      svg.append('clipPath').attr('id', clipPathId).append('rect').attr('x', xOffset).attr('y', yOffset).attr('width', spriteSize).attr('height', spriteSize);\n      return `url(#${clipPathId})`;\n    });\n\n    // Update existing images (if any data points are updated)\n    images.attr('x', d => xScale(d[0]) - spriteSize / 2).attr('y', d => yScale(d[1]) - spriteSize / 2);\n\n    // Remove old images\n    images.exit().remove();\n\n    // Add any additional SVG elements (e.g., axes) as needed...\n  }, [data, labels, width, height, colorCol, jitter]); // Ensure useEffect re-runs when these dependencies change\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"legend\",\n      style: {\n        position: 'fixed',\n        top: '2%',\n        left: '86%',\n        width: '200px',\n        height: '95%',\n        backgroundColor: 'rgba(0, 0, 0, 0.02)',\n        boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.5)',\n        borderRadius: '20px',\n        fontFamily: 'Perpetua',\n        overflowY: 'scroll'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '150px'\n        },\n        children: pieCharts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Scatterplot, \"ImE97drHzRNGYqV6cl4XwSY/aDM=\");\n_c = Scatterplot;\nexport default Scatterplot;\nvar _c;\n$RefreshReg$(_c, \"Scatterplot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","r_small","r_big","addAlpha","color","opacity","_opacity","Math","round","min","max","slice","toString","toUpperCase","getColumn","arr","n","map","x","Scatterplot","props","_s","width","height","data","labels","colorCol","jitter","margin","top","left","right","bottom","ref","pieCharts","setPieCharts","svg","select","current","selectAll","remove","spriteSheetPath","spriteSize","spritePadding","totalSpriteSize","xScale","scaleLinear","domain","d","range","yScale","images","enter","append","attr","i","column","row","floor","xOffset","yOffset","clipPathId","exit","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","position","backgroundColor","boxShadow","borderRadius","fontFamily","overflowY","_c","$RefreshReg$"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/plotdata_img.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nconst r_small = 5; // This will be unused as we switch to images\nconst r_big = 15; // This will be unused as we switch to images\n\n// Function to add opacity to hex colors, unchanged\nfunction addAlpha(color, opacity) {\n    var _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\n    return color.slice(0,7) + _opacity.toString(16).toUpperCase();\n}\n\n// Function to get a specific column from a 2D array, unchanged\nconst getColumn = (arr, n) => arr.map(x => x[n]);\n\n// Your existing functions remain unchanged...\n\nfunction Scatterplot(props) {\n    var { width, height, data, labels, colorCol, jitter } = props;\n    const margin = { top: 100, left: 120, right: 80, bottom: 100 };\n    const ref = useRef();\n    const [pieCharts, setPieCharts] = useState([]);\n\n    useEffect(() => {\n        const svg = d3.select(ref.current);\n        svg.selectAll('*').remove(); // Clear SVG to prevent duplication\n\n        // Assuming the sprite sheet path\n        const spriteSheetPath = 'datasets/spritesheet.png';\n        const spriteSize = 450; // Size of each sprite\n        const spritePadding = 50; // Padding around each sprite\n        const totalSpriteSize = spriteSize + spritePadding; // Total size of each sprite cell in the sheet\n\n        // Set scales for the scatterplot\n        const xScale = d3.scaleLinear()\n            .domain([d3.min(data, d => d[0]), d3.max(data, d => d[0])])\n            .range([margin.left, width - margin.right]);\n\n        const yScale = d3.scaleLinear()\n            .domain([d3.min(data, d => d[1]), d3.max(data, d => d[1])])\n            .range([height - margin.bottom, margin.top]);\n\n        // Bind data to image elements\n        const images = svg.selectAll('image').data(data);\n\n        // Enter new images\n        images.enter().append('image')\n            .attr('xlink:href', spriteSheetPath)\n            .attr('x', d => xScale(d[0]) - spriteSize / 2)\n            .attr('y', d => yScale(d[1]) - spriteSize / 2)\n            .attr('width', spriteSize)\n            .attr('height', spriteSize)\n            .attr('clip-path', (d, i) => {\n                // Calculate column and row for this data point's image in the sprite sheet\n                const column = i % 10; // Example layout calculation\n                const row = Math.floor(i / 20); // Example layout calculation\n                // Calculate the x and y offset for the clip-path\n                const xOffset = column * totalSpriteSize + spritePadding;\n                const yOffset = row * totalSpriteSize + spritePadding;\n                // Use a unique clipPath id for each image to prevent overlap\n                const clipPathId = `clip-${i}`;\n                svg.append('clipPath')\n                    .attr('id', clipPathId)\n                    .append('rect')\n                    .attr('x', xOffset)\n                    .attr('y', yOffset)\n                    .attr('width', spriteSize)\n                    .attr('height', spriteSize);\n                return `url(#${clipPathId})`;\n            });\n\n        // Update existing images (if any data points are updated)\n        images.attr('x', d => xScale(d[0]) - spriteSize / 2)\n            .attr('y', d => yScale(d[1]) - spriteSize / 2);\n\n        // Remove old images\n        images.exit().remove();\n\n        // Add any additional SVG elements (e.g., axes) as needed...\n    }, [data, labels, width, height, colorCol, jitter]); // Ensure useEffect re-runs when these dependencies change\n\n    return (\n        <>\n            <svg ref={ref} width={width} height={height}></svg>\n            <div id='legend' style={{\n                position: 'fixed', top: '2%', left: '86%', width: '200px', height: '95%', backgroundColor: 'rgba(0, 0, 0, 0.02)',\n                boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.5)', borderRadius: '20px', fontFamily: 'Perpetua', overflowY: 'scroll'\n            }}>\n                <div style={{ width: '150px', }}>{pieCharts}</div>\n            </div>\n        </>\n    );\n}\n\nexport default Scatterplot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}