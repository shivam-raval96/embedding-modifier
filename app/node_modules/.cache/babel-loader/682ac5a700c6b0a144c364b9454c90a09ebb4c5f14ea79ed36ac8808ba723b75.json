{"ast":null,"code":"import _toConsumableArray from \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nvar PolyBezier = /*#__PURE__*/function () {\n  function PolyBezier(curves) {\n    _classCallCheck(this, PolyBezier);\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n  _createClass(PolyBezier, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\" + this.curves.map(function (curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    }\n  }, {\n    key: \"addCurve\",\n    value: function addCurve(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.curves.map(function (v) {\n        return v.length();\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(idx) {\n      return this.curves[idx];\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n      return bbox;\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(d) {\n      var offset = [];\n      this.curves.forEach(function (v) {\n        offset.push.apply(offset, _toConsumableArray(v.offset(d)));\n      });\n      return new PolyBezier(offset);\n    }\n  }]);\n  return PolyBezier;\n}();\nexport { PolyBezier };","map":{"version":3,"names":["utils","PolyBezier","curves","_classCallCheck","_3d","_createClass","key","value","valueOf","toString","map","curve","pointsToString","points","join","addCurve","push","length","v","reduce","a","b","idx","bbox","c","i","expandbox","offset","d","forEach","apply","_toConsumableArray"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/bezier-js/src/poly-bezier.js"],"sourcesContent":["import { utils } from \"./utils.js\";\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      \"[\" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(\", \") +\n      \"]\"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\nexport { PolyBezier };\n"],"mappings":";;;AAAA,SAASA,KAAK,QAAQ,YAAY;;AAElC;AACA;AACA;AACA;AAHA,IAIMC,UAAU;EACd,SAAAA,WAAYC,MAAM,EAAE;IAAAC,eAAA,OAAAF,UAAA;IAClB,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACE,GAAG,GAAG,KAAK;IAChB,IAAI,CAAC,CAACF,MAAM,EAAE;MACZ,IAAI,CAACA,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACE,GAAG,GAAG,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC,CAACE,GAAG;IAC/B;EACF;EAACC,YAAA,CAAAJ,UAAA;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAC,QAAA,EAAU;MACR,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC;IACxB;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAE,SAAA,EAAW;MACT,OACE,GAAG,GACH,IAAI,CAACP,MAAM,CACRQ,GAAG,CAAC,UAAUC,KAAK,EAAE;QACpB,OAAOX,KAAK,CAACY,cAAc,CAACD,KAAK,CAACE,MAAM,CAAC;MAC3C,CAAC,CAAC,CACDC,IAAI,CAAC,IAAI,CAAC,GACb,GAAG;IAEP;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAQ,SAASJ,KAAK,EAAE;MACd,IAAI,CAACT,MAAM,CAACc,IAAI,CAACL,KAAK,CAAC;MACvB,IAAI,CAACP,GAAG,GAAG,IAAI,CAACA,GAAG,IAAIO,KAAK,CAACP,GAAG;IAClC;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAED,SAAAU,OAAA,EAAS;MACP,OAAO,IAAI,CAACf,MAAM,CACfQ,GAAG,CAAC,UAAUQ,CAAC,EAAE;QAChB,OAAOA,CAAC,CAACD,MAAM,CAAC,CAAC;MACnB,CAAC,CAAC,CACDE,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;QACtB,OAAOD,CAAC,GAAGC,CAAC;MACd,CAAC,CAAC;IACN;EAAC;IAAAf,GAAA;IAAAC,KAAA,EAED,SAAAI,MAAMW,GAAG,EAAE;MACT,OAAO,IAAI,CAACpB,MAAM,CAACoB,GAAG,CAAC;IACzB;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAED,SAAAgB,KAAA,EAAO;MACL,IAAMC,CAAC,GAAG,IAAI,CAACtB,MAAM;MACrB,IAAIqB,IAAI,GAAGC,CAAC,CAAC,CAAC,CAAC,CAACD,IAAI,CAAC,CAAC;MACtB,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,CAAC,CAACP,MAAM,EAAEQ,CAAC,EAAE,EAAE;QACjCzB,KAAK,CAAC0B,SAAS,CAACH,IAAI,EAAEC,CAAC,CAACC,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAAC;MACpC;MACA,OAAOA,IAAI;IACb;EAAC;IAAAjB,GAAA;IAAAC,KAAA,EAED,SAAAoB,OAAOC,CAAC,EAAE;MACR,IAAMD,MAAM,GAAG,EAAE;MACjB,IAAI,CAACzB,MAAM,CAAC2B,OAAO,CAAC,UAAUX,CAAC,EAAE;QAC/BS,MAAM,CAACX,IAAI,CAAAc,KAAA,CAAXH,MAAM,EAAAI,kBAAA,CAASb,CAAC,CAACS,MAAM,CAACC,CAAC,CAAC,EAAC;MAC7B,CAAC,CAAC;MACF,OAAO,IAAI3B,UAAU,CAAC0B,MAAM,CAAC;IAC/B;EAAC;EAAA,OAAA1B,UAAA;AAAA;AAGH,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}