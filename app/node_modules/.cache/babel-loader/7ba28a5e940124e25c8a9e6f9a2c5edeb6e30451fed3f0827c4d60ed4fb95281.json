{"ast":null,"code":"import _classCallCheck from \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Clock, HalfFloatType, NoBlending, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n    this.renderer = renderer;\n    this._pixelRatio = renderer.getPixelRatio();\n    if (renderTarget === undefined) {\n      var size = renderer.getSize(new Vector2());\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, {\n        type: HalfFloatType\n      });\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = [];\n    this.copyPass = new ShaderPass(CopyShader);\n    this.copyPass.material.blending = NoBlending;\n    this.clock = new Clock();\n  }\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n      for (var i = 0, il = this.passes.length; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil;\n\n            //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);\n\n            //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n          this.swapBuffers();\n        }\n        if (MaskPass !== undefined) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.copyPass.dispose();\n    }\n  }]);\n  return EffectComposer;\n}();\nexport { EffectComposer };","map":{"version":3,"names":["Clock","HalfFloatType","NoBlending","Vector2","WebGLRenderTarget","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","_classCallCheck","_pixelRatio","getPixelRatio","undefined","size","getSize","_width","width","_height","height","type","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","passes","copyPass","material","blending","clock","_createClass","key","value","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","removePass","indexOf","isLastEnabledPass","passIndex","i","length","enabled","render","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","setRenderTarget","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["import {\n\tClock,\n\tHalfFloatType,\n\tNoBlending,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType } );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\t\tthis.copyPass.material.blending = NoBlending;\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\n\t\tthis.copyPass.dispose();\n\n\t}\n\n}\n\nexport { EffectComposer };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}