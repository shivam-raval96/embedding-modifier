{"ast":null,"code":"var _jsxFileName = \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/plotdata.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors2 = [\"#9edae5\", \"#17becf\", \"#dbdb8d\", \"#bcbd22\", \"#c7c7c7\", \"#7f7f7f\", \"#f7b6d2\", \"#e377c2\", \"#c49c94\", \"#8c564b\", \"#c5b0d5\", \"#9467bd\", \"#ff9896\", \"#d62728\", \"#98df8a\", \"#2ca02c\", \"#ffbb78\", \"#ff7f0e\", \"#aec7e8\", \"#1f77b4\"];\nconst colors = [\"#d62728\", \"#bcbd22\", \"#0000\", \"#17becf\", \"#FFD700\", \"#9467bd\", \"#808080\", \"#1f77b4\", \"#2ca02c\", \"#ff7f0e\", \"#7f7f7f\", \"#e377c2\"];\nconst getColumn = (arr, n) => arr.map(x => x[n]);\nfunction encodeArray(array) {\n  // Step 1: Identify unique strings\n  const uniqueStrings = new Set(array);\n\n  // Step 2: Map strings to numbers\n  const stringToNumberMap = {};\n  let number = 0;\n  uniqueStrings.forEach(str => {\n    stringToNumberMap[str] = number++;\n  });\n  console.log(uniqueStrings, stringToNumberMap);\n\n  // Step 3: Generate encoded array\n  return stringToNumberMap;\n}\nfunction getEncodedArray(array, stringToNumberMap) {\n  return array.map(str => stringToNumberMap[str]);\n}\nlet names = [\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\", \"Charlie\"];\nlet labels = [0, 0, 0, 1, 1, 1, 2, 2, 2]; // Example labels\n\n// Initialize an empty object for counts\nlet counts = {};\n\n// Function to get a color for the label (modify as needed)\nfunction getColor(label) {\n  const colors = ['#E38627', '#C13C37', '#6A2135']; // Add more colors as needed\n  return colors[label % colors.length];\n}\n\n// Iterate over the labels array and count names for each label\nlabels.forEach((label, index) => {\n  if (names[index]) {\n    if (!counts[label]) {\n      counts[label] = {\n        title: `Label ${label}`,\n        value: 1,\n        color: getColor(label)\n      };\n    } else {\n      counts[label].value += 1;\n    }\n  }\n});\n\n// Convert the counts object into an array\nlet result = Object.values(counts);\nconsole.log(result);\nfunction getPieDistribution(array, labels) {\n  // Initialize a map to keep counts\n  const counts = new Map();\n\n  // Count the strings for each label\n  labels.forEach((label, index) => {\n    // Increase the count for this label\n    counts.set(label, (counts.get(label) || 0) + 1);\n  });\n\n  // Define colors for each label, you can customize this\n  const colors = ['#E38627', '#C13C37', '#6A2135'];\n\n  // Create the result array\n  const result = Array.from(counts).map(([label, count]) => ({\n    title: `Label ${label}`,\n    value: count,\n    color: colors[label % colors.length] // Assign a color based on label\n  }));\n\n  return distribution;\n}\nfunction Scatterplot(props) {\n  _s();\n  const {\n    width,\n    height,\n    data,\n    labels,\n    colorCol,\n    jitter\n  } = props;\n  const margin = {\n    top: 100,\n    left: 120,\n    right: 80,\n    bottom: 100\n  };\n  const ref = useRef();\n  const [labelData, setLabelData] = useState([]);\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n    svg.selectAll('*').remove();\n\n    // Set scales for the scatterplot\n    const xScale = d3.scaleLinear().domain([d3.min(data, d => d[0]), d3.max(data, d => d[0])]).range([margin.left, width - margin.right]);\n    const yScale = d3.scaleLinear().domain([d3.min(data, d => d[1]), d3.max(data, d => d[1])]).range([height - margin.bottom, margin.top]);\n\n    // Tooltips\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0).style(\"background-color\", \"white\").style(\"border\", \"solid\").style(\"border-width\", \"2px\").style(\"border-radius\", \"5px\").style(\"padding\", \"5px\").style(\"margin-right\", \"50px\").style(\"position\", \"absolute\");\n\n    // Bind data to circles and add tooltips\n    //console.log(labels)\n    // Compute the density contours.\n    const contours = d3.contourDensity().x(d => xScale(d[0])).y(d => yScale(d[1])).size([width, height]).bandwidth(40).thresholds(3)(data);\n\n    //console.log(contours)\n\n    // Append the contours.\n    svg.selectAll('contour').attr(\"stroke-linejoin\", \"round\").attr(\"stroke\", 'black').data(contours).join(\"path\").style(\"opacity\", (d, i) => i % 5 ? 0 : 0.2).attr(\"fill\", (d, i) => 'gray').attr(\"stroke-width\", (d, i) => i % 5 ? 0.25 : 1)\n    //.attr(\"stroke\", 'red')\n    .attr(\"d\", d3.geoPath());\n\n    //SetcolorCol\n    if (colorCol != -1) {\n      var array = getColumn(data, colorCol);\n      var stringToNumberMap = encodeArray(array);\n    } else {\n      var array = getColumn(data, 3);\n      var stringToNumberMap = encodeArray(getColumn(data, 3));\n    }\n    var color_idx = getEncodedArray(array, stringToNumberMap);\n    let result = getPieDistribution(getColumn(data, colorCol), getColumn(data, 3));\n    console.log(result);\n    var points = svg.selectAll('circle').data(data).enter().append('circle').attr('cx', d => xScale(d[0])).attr('cy', d => yScale(d[1])).attr('r', 4).style(\"opacity\", 0.9).attr('fill', (d, i) => colors[color_idx[i] % 10]).attr('stroke', 'black') // Add this line for the boundary color\n    .attr('stroke-width', 0.5) // Add this line for the boundary width\n    .on(\"mouseover\", (event, d) => {\n      svg.selectAll('circle').transition().duration(100).style(\"opacity\", 0.9).attr('stroke-width', 0.5).attr('r', 4);\n      d3.select(event.currentTarget).transition().duration(100).style(\"opacity\", 1).attr('stroke-width', 0.5) // Add this line for the boundary width\n      .attr('r', 10);\n      tooltip.transition().duration(100).style(\"opacity\", .9);\n      tooltip.html(d[2]).style(\"left\", event.pageX + 5 + \"px\").style(\"top\", event.pageY - 28 + \"px\");\n    }).on(\"mouseout\", d => {\n      tooltip.transition().duration(500).style(\"opacity\", 0);\n    });\n    if (jitter) {\n      points.attr(\"cx\", function (d, i) {\n        return xScale(d[0]) + 2 * Math.random();\n      });\n      points.attr(\"cy\", function (d, i) {\n        return yScale(d[1]) + 2 * Math.random();\n      });\n    }\n\n    // Bind data to text elements and add labels\n\n    svg.selectAll('text.label').data(labels).enter().append('text').attr('class', 'label').attr('fill', 'black').attr('x', d => xScale(d[0])).attr('y', d => yScale(d[1])).attr('dy', '.35em').attr('text-anchor', 'middle').text(d => `${d[2]}`).attr('stroke', 'white').attr('stroke-width', '0.3px').attr('font-size', '17px').attr('font-weight', '800');\n    setLabelData([[{\n      title: 'Red',\n      value: 3,\n      color: colors[0]\n    }, {\n      title: 'Others',\n      value: 1,\n      color: '#C13C37'\n    }], [{\n      title: 'Blue',\n      value: 3,\n      color: colors[1]\n    }, {\n      title: 'Others',\n      value: 1,\n      color: '#C13C37'\n    }], [{\n      title: 'Green',\n      value: 3,\n      color: colors[2]\n    }, {\n      title: 'Others',\n      value: 1,\n      color: '#C13C37'\n    }]]);\n  }, [data, labels, width, height, colorCol, jitter]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: ref,\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"legend\",\n      style: {\n        position: 'absolute',\n        top: '80%',\n        left: \"1%\",\n        width: 30,\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this), \";\"]\n  }, void 0, true);\n}\n_s(Scatterplot, \"fDgXZq7IRh/MkJged12UYdt5Zig=\");\n_c = Scatterplot;\nexport default Scatterplot;\nvar _c;\n$RefreshReg$(_c, \"Scatterplot\");","map":{"version":3,"names":["React","useRef","useEffect","useState","d3","PieChart","jsxDEV","_jsxDEV","Fragment","_Fragment","colors2","colors","getColumn","arr","n","map","x","encodeArray","array","uniqueStrings","Set","stringToNumberMap","number","forEach","str","console","log","getEncodedArray","names","labels","counts","getColor","label","length","index","title","value","color","result","Object","values","getPieDistribution","Map","set","get","Array","from","count","distribution","Scatterplot","props","_s","width","height","data","colorCol","jitter","margin","top","left","right","bottom","ref","labelData","setLabelData","svg","select","current","selectAll","remove","xScale","scaleLinear","domain","min","d","max","range","yScale","tooltip","append","attr","style","contours","contourDensity","y","size","bandwidth","thresholds","join","i","geoPath","color_idx","points","enter","on","event","transition","duration","currentTarget","html","pageX","pageY","Math","random","text","children","fileName","_jsxFileName","lineNumber","columnNumber","id","position","display","_c","$RefreshReg$"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/plotdata.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport { PieChart } from 'react-minimal-pie-chart';\n\n\n\n\nconst colors2 = [\n    \"#9edae5\", \"#17becf\", \"#dbdb8d\", \"#bcbd22\", \"#c7c7c7\", \"#7f7f7f\", \n    \"#f7b6d2\", \"#e377c2\", \"#c49c94\", \"#8c564b\", \"#c5b0d5\", \"#9467bd\", \n    \"#ff9896\", \"#d62728\", \"#98df8a\", \"#2ca02c\", \"#ffbb78\", \"#ff7f0e\", \n    \"#aec7e8\", \"#1f77b4\"\n]\n\nconst colors = [\n    \"#d62728\", \"#bcbd22\",\"#0000\",\"#17becf\", \"#FFD700\",\"#9467bd\",\n     \"#808080\",\"#1f77b4\", \"#2ca02c\", \"#ff7f0e\", \"#7f7f7f\",\"#e377c2\"\n]\n\nconst getColumn = (arr, n) => arr.map(x => x[n]);\n\nfunction encodeArray(array) {\n    // Step 1: Identify unique strings\n    const uniqueStrings = new Set(array);\n\n\n    // Step 2: Map strings to numbers\n    const stringToNumberMap = {};\n    let number = 0;\n    uniqueStrings.forEach(str => {\n        stringToNumberMap[str] = number++;\n    });\n    console.log(uniqueStrings,stringToNumberMap )\n\n    // Step 3: Generate encoded array\n    return stringToNumberMap;\n}\n\nfunction getEncodedArray(array, stringToNumberMap){\n\n    return array.map(str => stringToNumberMap[str]);\n\n}\n\nlet names = [\"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\", \"Charlie\", \"Alice\", \"Bob\", \"Charlie\"];\nlet labels = [0, 0, 0, 1, 1, 1, 2, 2, 2]; // Example labels\n\n// Initialize an empty object for counts\nlet counts = {};\n\n// Function to get a color for the label (modify as needed)\nfunction getColor(label) {\n  const colors = ['#E38627', '#C13C37', '#6A2135']; // Add more colors as needed\n  return colors[label % colors.length];\n}\n\n// Iterate over the labels array and count names for each label\nlabels.forEach((label, index) => {\n  if (names[index]) {\n    if (!counts[label]) {\n      counts[label] = { title: `Label ${label}`, value: 1, color: getColor(label) };\n    } else {\n      counts[label].value += 1;\n    }\n  }\n});\n\n// Convert the counts object into an array\nlet result = Object.values(counts);\n\nconsole.log(result);\n\nfunction getPieDistribution(array, labels) {\n    // Initialize a map to keep counts\n    const counts = new Map();\n\n    // Count the strings for each label\n    labels.forEach((label, index) => {\n        // Increase the count for this label\n        counts.set(label, (counts.get(label) || 0) + 1);\n    });\n\n    // Define colors for each label, you can customize this\n    const colors = ['#E38627', '#C13C37', '#6A2135'];\n\n    // Create the result array\n    const result = Array.from(counts).map(([label, count]) => ({\n        title: `Label ${label}`,\n        value: count,\n        color: colors[label % colors.length] // Assign a color based on label\n    }));\n\n\n    return distribution;\n}\n\n\n\n\n\nfunction Scatterplot(props) {\n  const { width, height, data , labels, colorCol, jitter} = props;\n  const margin = {top:100, left:120, right:80, bottom:100}\n  const ref = useRef();\n  const [labelData, setLabelData] = useState([])\n\n\n  useEffect(() => {\n    const svg = d3.select(ref.current);\n\n\n    svg.selectAll('*').remove()\n\n    \n    // Set scales for the scatterplot\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(data, d => d[0]), d3.max(data, d => d[0])])\n      .range([margin.left, width-margin.right]);\n\n    const yScale = d3.scaleLinear()\n      .domain([d3.min(data, d => d[1]), d3.max(data, d => d[1])])\n      .range([height-margin.bottom, margin.top]);\n\n\n    // Tooltips\n    const tooltip = d3.select(\"body\").append(\"div\")\n        .attr(\"class\", \"tooltip\")\n        .style(\"opacity\", 0)\n        .style(\"background-color\", \"white\")\n        .style(\"border\", \"solid\")\n        .style(\"border-width\", \"2px\")\n        .style(\"border-radius\", \"5px\")\n        .style(\"padding\", \"5px\")\n        .style(\"margin-right\", \"50px\")\n        .style(\"position\", \"absolute\");\n\n\n    // Bind data to circles and add tooltips\n    //console.log(labels)\n    // Compute the density contours.\n    const contours = d3.contourDensity()\n    .x(d => xScale(d[0]))\n    .y(d => yScale(d[1]))\n    .size([width, height])\n    .bandwidth(40)\n    .thresholds(3)\n    (data);\n\n\n\n    //console.log(contours)\n    \n\n    // Append the contours.\n    svg.selectAll('contour').attr(\"stroke-linejoin\", \"round\")\n        .attr(\"stroke\", 'black')\n        .data(contours)\n        .join(\"path\")\n        .style(\"opacity\", (d, i) => i % 5 ? 0 : 0.2) \n        .attr(\"fill\", (d, i) => 'gray')\n        .attr(\"stroke-width\", (d, i) => i % 5 ? 0.25 : 1)\n        //.attr(\"stroke\", 'red')\n        .attr(\"d\", d3.geoPath());\n\n\n    //SetcolorCol\n    if (colorCol!=-1){\n        var array = getColumn(data,colorCol)\n        var stringToNumberMap = encodeArray(array);\n\n\n    }else{\n        var array = getColumn(data,3)\n        var stringToNumberMap= encodeArray(getColumn(data,3))\n\n    }\n\n\n\n    var color_idx = getEncodedArray(array, stringToNumberMap)\n\n    let result = getPieDistribution(getColumn(data,colorCol), getColumn(data,3));\n    console.log(result);\n    var points=svg.selectAll('circle')\n        .data(data)\n        .enter()\n        .append('circle')\n        .attr('cx', d => xScale(d[0]))\n        .attr('cy', d => yScale(d[1]))\n        .attr('r', 4)\n        .style(\"opacity\", 0.9)\n        .attr('fill', (d,i) =>  colors[color_idx[i]%10])\n        .attr('stroke', 'black')  // Add this line for the boundary color\n        .attr('stroke-width', 0.5)  // Add this line for the boundary width\n        .on(\"mouseover\", (event, d) => {\n\n            svg.selectAll('circle')\n            .transition().duration(100)\n            .style(\"opacity\", 0.9) \n            .attr('stroke-width', 0.5) \n            .attr('r', 4);\n            d3.select(event.currentTarget).transition().duration(100)\n                .style(\"opacity\", 1) \n                .attr('stroke-width', 0.5)  // Add this line for the boundary width\n                .attr('r', 10);\n\n\n\n            tooltip.transition()\n                .duration(100)\n                .style(\"opacity\", .9);\n            tooltip.html(d[2])\n                .style(\"left\", (event.pageX + 5) + \"px\")\n                .style(\"top\", (event.pageY - 28) + \"px\");\n        })\n        .on(\"mouseout\", (d) => {\n            tooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0);\n        });\n\n        \n        \n        if (jitter){\n            points.attr(\"cx\", function(d,i) { return xScale(d[0])+ 2*Math.random() });\n            points.attr(\"cy\", function(d,i) { return yScale(d[1])+ 2*Math.random() });\n            \n        }\n\n\n\n    // Bind data to text elements and add labels\n\n    svg.selectAll('text.label')\n        .data(labels)\n        .enter()\n        .append('text')\n        .attr('class', 'label')\n        .attr('fill', 'black')  \n        .attr('x', d => xScale(d[0])) \n        .attr('y', d => yScale(d[1]))\n        .attr('dy', '.35em')  \n        .attr('text-anchor', 'middle')\n        .text(d => `${d[2]}`)\n        .attr('stroke', 'white')  \n        .attr('stroke-width', '0.3px') \n        .attr('font-size', '17px')\n        .attr('font-weight', '800') ;\n    \n\n\n   \n        \n        setLabelData( [\n            [{ title: 'Red', value: 3, color: colors[0] },{ title: 'Others', value: 1, color: '#C13C37' },],\n            [{ title: 'Blue', value: 3, color: colors[1]  },{ title: 'Others', value: 1, color: '#C13C37' },],\n            [{ title: 'Green', value: 3, color: colors[2]  },{ title: 'Others', value: 1, color: '#C13C37' },],\n\n        ])\n\n      \n\n  }, [data, labels, width, height, colorCol, jitter]);\n\n  return (\n    <>\n            \n        <svg ref={ref} width={width} height={height}></svg>\n        <div id = 'legend' style={{position:'absolute', top:'80%', left:\"1%\",width:30, display:'none'}}>\n\n            \n            </div>;\n    </>\n  )\n}\n\nexport default Scatterplot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}