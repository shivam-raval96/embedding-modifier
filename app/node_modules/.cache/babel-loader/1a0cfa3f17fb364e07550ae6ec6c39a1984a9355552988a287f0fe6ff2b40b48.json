{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection')) : typeof define === 'function' && define.amd ? define(['exports', 'd3-selection'], factory) : factory(global.fc = global.fc || {}, global.d3);\n})(this, function (exports, d3Selection) {\n  'use strict';\n\n  // \"Caution: avoid interpolating to or from the number zero when the interpolator is used to generate\n  // a string (such as with attr).\n  // Very small values, when stringified, may be converted to scientific notation and\n  // cause a temporarily invalid attribute or style property value.\n  // For example, the number 0.0000001 is converted to the string \"1e-7\".\n  // This is particularly noticeable when interpolating opacity values.\n  // To avoid scientific notation, start or end the transition at 1e-6,\n  // which is the smallest value that is not stringified in exponential notation.\"\n  // - https://github.com/mbostock/d3/wiki/Transitions#d3_interpolateNumber\n  var effectivelyZero = 1e-6;\n\n  // Wrapper around d3's selectAll/data data-join, which allows decoration of the result.\n  // This is achieved by appending the element to the enter selection before exposing it.\n  // A default transition of fade in/out is also implicitly added but can be modified.\n\n  function dataJoin(element, className) {\n    element = element || 'g';\n    var key = function key(_, i) {\n      return i;\n    };\n    var dataJoin = function dataJoin(container, data) {\n      data = data || function (d) {\n        return d;\n      };\n\n      // update\n      var selector = className == null ? element : element + '.' + className;\n      var selected = container.selectAll(selector)\n      // in order to support nested selections, they can be filtered\n      // to only return immediate children of the container\n      .filter(function () {\n        return this.parentNode === container.node();\n      });\n      var updateSelection = selected.data(data, key);\n\n      // enter\n      // when container is a transition, entering elements fade in (from transparent to opaque)\n      // N.B. insert() is used to create new elements, rather than append(). insert() behaves in a special manner\n      // on enter selections - entering elements will be inserted immediately before the next following sibling\n      // in the update selection, if any.\n      // This helps order the elements in an order consistent with the data, but doesn't guarantee the ordering;\n      // if the updating elements change order then selection.order() would be required to update the order.\n      // (#528)\n      var enterSelection = updateSelection.enter().insert(element) // <<<--- this is the secret sauce of this whole file\n      .attr('class', className);\n\n      // exit\n      // when container is a transition, exiting elements fade out (from opaque to transparent)\n      var exitSelection = updateSelection.exit();\n\n      // automatically merge in the enter selection\n      updateSelection = updateSelection.merge(enterSelection);\n\n      // if transitions are enable inherit the default transition from ancestors\n      // and apply a default fade in/out transition\n      if (d3Selection.selection.prototype.transition) {\n        enterSelection.style('opacity', effectivelyZero);\n        updateSelection.transition().style('opacity', 1);\n        exitSelection.transition().style('opacity', effectivelyZero);\n      }\n\n      // automatically remove nodes in the exit selection\n      exitSelection.remove();\n      updateSelection.enter = function () {\n        return enterSelection;\n      };\n      updateSelection.exit = function () {\n        return exitSelection;\n      };\n      return updateSelection;\n    };\n    dataJoin.element = function (x) {\n      if (!arguments.length) {\n        return element;\n      }\n      element = x;\n      return dataJoin;\n    };\n    dataJoin.className = function (x) {\n      if (!arguments.length) {\n        return className;\n      }\n      className = x;\n      return dataJoin;\n    };\n    dataJoin.key = function (x) {\n      if (!arguments.length) {\n        return key;\n      }\n      key = x;\n      return dataJoin;\n    };\n    return dataJoin;\n  }\n  exports.dataJoin = dataJoin;\n});","map":{"version":3,"names":["global","factory","exports","module","require","define","amd","fc","d3","d3Selection","effectivelyZero","dataJoin","element","className","key","_","i","container","data","d","selector","selected","selectAll","filter","parentNode","node","updateSelection","enterSelection","enter","insert","attr","exitSelection","exit","merge","selection","prototype","transition","style","remove","x","arguments","length"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/d3fc-data-join/build/d3fc-data-join.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-selection')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'd3-selection'], factory) :\n    (factory((global.fc = global.fc || {}),global.d3));\n}(this, function (exports,d3Selection) { 'use strict';\n\n    // \"Caution: avoid interpolating to or from the number zero when the interpolator is used to generate\n    // a string (such as with attr).\n    // Very small values, when stringified, may be converted to scientific notation and\n    // cause a temporarily invalid attribute or style property value.\n    // For example, the number 0.0000001 is converted to the string \"1e-7\".\n    // This is particularly noticeable when interpolating opacity values.\n    // To avoid scientific notation, start or end the transition at 1e-6,\n    // which is the smallest value that is not stringified in exponential notation.\"\n    // - https://github.com/mbostock/d3/wiki/Transitions#d3_interpolateNumber\n    var effectivelyZero = 1e-6;\n\n    // Wrapper around d3's selectAll/data data-join, which allows decoration of the result.\n    // This is achieved by appending the element to the enter selection before exposing it.\n    // A default transition of fade in/out is also implicitly added but can be modified.\n\n    function dataJoin (element, className) {\n        element = element || 'g';\n\n        var key = function key(_, i) {\n            return i;\n        };\n\n        var dataJoin = function dataJoin(container, data) {\n            data = data || function (d) {\n                return d;\n            };\n\n            // update\n            var selector = className == null ? element : element + '.' + className;\n            var selected = container.selectAll(selector)\n            // in order to support nested selections, they can be filtered\n            // to only return immediate children of the container\n            .filter(function () {\n                return this.parentNode === container.node();\n            });\n            var updateSelection = selected.data(data, key);\n\n            // enter\n            // when container is a transition, entering elements fade in (from transparent to opaque)\n            // N.B. insert() is used to create new elements, rather than append(). insert() behaves in a special manner\n            // on enter selections - entering elements will be inserted immediately before the next following sibling\n            // in the update selection, if any.\n            // This helps order the elements in an order consistent with the data, but doesn't guarantee the ordering;\n            // if the updating elements change order then selection.order() would be required to update the order.\n            // (#528)\n            var enterSelection = updateSelection.enter().insert(element) // <<<--- this is the secret sauce of this whole file\n            .attr('class', className);\n\n            // exit\n            // when container is a transition, exiting elements fade out (from opaque to transparent)\n            var exitSelection = updateSelection.exit();\n\n            // automatically merge in the enter selection\n            updateSelection = updateSelection.merge(enterSelection);\n\n            // if transitions are enable inherit the default transition from ancestors\n            // and apply a default fade in/out transition\n            if (d3Selection.selection.prototype.transition) {\n                enterSelection.style('opacity', effectivelyZero);\n                updateSelection.transition().style('opacity', 1);\n                exitSelection.transition().style('opacity', effectivelyZero);\n            }\n\n            // automatically remove nodes in the exit selection\n            exitSelection.remove();\n\n            updateSelection.enter = function () {\n                return enterSelection;\n            };\n            updateSelection.exit = function () {\n                return exitSelection;\n            };\n\n            return updateSelection;\n        };\n\n        dataJoin.element = function (x) {\n            if (!arguments.length) {\n                return element;\n            }\n            element = x;\n            return dataJoin;\n        };\n        dataJoin.className = function (x) {\n            if (!arguments.length) {\n                return className;\n            }\n            className = x;\n            return dataJoin;\n        };\n        dataJoin.key = function (x) {\n            if (!arguments.length) {\n                return key;\n            }\n            key = x;\n            return dataJoin;\n        };\n\n        return dataJoin;\n    }\n\n    exports.dataJoin = dataJoin;\n\n}));"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}