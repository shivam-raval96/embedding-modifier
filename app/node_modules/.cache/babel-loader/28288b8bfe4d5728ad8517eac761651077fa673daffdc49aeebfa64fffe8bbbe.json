{"ast":null,"code":"var _jsxFileName = \"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/force.js\",\n  _s = $RefreshSig$();\nimport { ForceGraph2D } from \"react-force-graph\";\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport papers from './datasets/papers.json';\nimport papers_labels from './datasets/papers_lbls.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ForceGraph() {\n  _s();\n  function nodePaint(node, color, ctx) {\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false);\n    ctx.fill(); // circle\n  }\n\n  function nodeLabel() {\n    const label = node.name;\n    const fontSize = 12 / globalScale;\n    ctx.font = `${fontSize}px Sans-Serif`;\n    const textWidth = ctx.measureText(label).width;\n    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n    ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = node.color;\n    ctx.fillText(label, node.x, node.y);\n    node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n  }\n\n  let data = papers;\n  let labels = papers_labels;\n  let range = 1000;\n  let x = d3.scaleLinear().range([-range, range]),\n    y = d3.scaleLinear().range([-range, range]);\n  var d_extent_x = d3.extent(data['nodes'], d => +d['x']),\n    d_extent_y = d3.extent(data['nodes'], d => +d['y']);\n\n  // Draw axes\n  x.domain(d_extent_x);\n  y.domain(d_extent_y);\n  data['nodes'] = data['nodes'].map(function (e) {\n    e['x'] = x(+e['x']);\n    e['y'] = y(+e['y']);\n    return e;\n  });\n  data['links'] = data['links'].map(function (e) {\n    e['value'] = +e['value'];\n    return e;\n  });\n  console.log(data);\n  const forceRef = useRef(null);\n  useEffect(() => {\n    forceRef.current.d3Force(\"charge\").strength(0);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: data,\n      nodeLabel: \"id\",\n      nodeAutoColorBy: \"group\",\n      nodeRelSize: 8,\n      d3VelocityDecay: 0.95,\n      nodeOpacity: 0.01,\n      nodeLabel: \"name\",\n      nodeDesc: \"id\",\n      linkVisibility: true,\n      onNodeClick: node => {\n        console.log(node);\n      },\n      onLinkClick: link => {\n        console.log(link);\n        link['value'] = 50;\n      },\n      onNodeDragEnd: node => {\n        node.fx = node.x;\n        node.fy = node.y;\n        node.fz = node.z;\n      },\n      ref: forceRef,\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        if (node.label) {\n          nodeLabel(node, ctx, globalScale);\n        } else {\n          nodePaint(node, getColor(node.id), ctx);\n        }\n      },\n      nodePointerAreaPaint: (node, color, ctx) => {\n        ctx.fillStyle = color;\n        const bckgDimensions = node.__bckgDimensions;\n        bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(ForceGraph, \"TxYESRtw+XzKUI1LiKhMBv+9Ljk=\");\n_c = ForceGraph;\nexport default ForceGraph;\nvar _c;\n$RefreshReg$(_c, \"ForceGraph\");","map":{"version":3,"names":["ForceGraph2D","React","useContext","useState","useRef","useEffect","d3","papers","papers_labels","jsxDEV","_jsxDEV","Fragment","_Fragment","ForceGraph","_s","nodePaint","node","color","ctx","fillStyle","beginPath","arc","x","y","Math","PI","fill","nodeLabel","label","name","fontSize","globalScale","font","textWidth","measureText","width","bckgDimensions","map","n","fillRect","textAlign","textBaseline","fillText","__bckgDimensions","data","labels","range","scaleLinear","d_extent_x","extent","d","d_extent_y","domain","e","console","log","forceRef","current","d3Force","strength","children","graphData","nodeAutoColorBy","nodeRelSize","d3VelocityDecay","nodeOpacity","nodeDesc","linkVisibility","onNodeClick","onLinkClick","link","onNodeDragEnd","fx","fy","fz","z","ref","nodeCanvasObject","getColor","id","nodePointerAreaPaint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/src/force.js"],"sourcesContent":["import { ForceGraph2D } from \"react-force-graph\";\nimport React, { useContext, useState, useRef, useEffect } from 'react';\nimport * as d3 from \"d3\";\nimport papers from './datasets/papers.json'\nimport papers_labels from './datasets/papers_lbls.json'\n\nfunction ForceGraph() {\n    function nodePaint(node, color, ctx) {\n        ctx.fillStyle = color;\n        ctx.beginPath(); ctx.arc(node.x, node.y, 5, 0, 2 * Math.PI, false); ctx.fill();  // circle\n        \n      }\n    function nodeLabel(){\n            const label = node.name;\n            const fontSize = 12/globalScale;\n            ctx.font = `${fontSize}px Sans-Serif`;\n            const textWidth = ctx.measureText(label).width;\n            const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\n\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n            ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillStyle = node.color;\n            ctx.fillText(label, node.x, node.y);\n\n            node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint\n            \n    }\n    let data = papers\n    let labels = papers_labels\n    let range=1000\n\n\n\n        let x = d3.scaleLinear().range([-range,range]),\n        y = d3.scaleLinear().range([-range,range]);\n\n\n\n\n    var d_extent_x = d3.extent(data['nodes'], (d) => +d['x']),\n        d_extent_y = d3.extent(data['nodes'], (d) => +d['y']);\n\n    // Draw axes\n    x.domain(d_extent_x);\n    y.domain(d_extent_y);\n\n    data['nodes'] = data['nodes'].map(function(e){\n        e['x'] = x(+e['x'])\n        e['y'] = y(+e['y'])\n        return e;\n    });\n\n    data['links'] = data['links'].map(function(e){\n        e['value'] = +e['value']\n        return e;\n    });\n\n    console.log(data)\n\n    const forceRef = useRef(null);\n    useEffect(() => {\n        forceRef.current.d3Force(\"charge\").strength(0);\n    });\n    return (\n\n        <>\n\n\n        <ForceGraph2D\n          graphData={data}\n          nodeLabel=\"id\"\n          nodeAutoColorBy=\"group\"\n          nodeRelSize={8}\n          d3VelocityDecay={0.95}\n          nodeOpacity ={0.01}\n          nodeLabel = {\"name\"}\n          nodeDesc = {\"id\"}\n          linkVisibility ={true}\n          onNodeClick =  {node=>{console.log(node)}}\n          onLinkClick =  {link=>{console.log(link);link['value'] = 50}}\n          onNodeDragEnd={node => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          }}\n          ref={forceRef}\n          nodeCanvasObject={(node, ctx, globalScale) => {\n            if (node.label){\n                nodeLabel(node, ctx, globalScale)\n            }else{\n                nodePaint(node, getColor(node.id), ctx)\n            }\n          }}\n          nodePointerAreaPaint={(node, color, ctx) => {\n            ctx.fillStyle = color;\n            const bckgDimensions = node.__bckgDimensions;\n            bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n          }}\n          \n            />\n        </>\n      );\n    }\n    \n    export default ForceGraph;\n    \n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}