{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\n// InlineTransform: getVectorCode\nmodule.exports.getVectorCode = getVectorCode;\n// InlineTransform: getBodyCode\nmodule.exports.getBodyCode = getBodyCode;\n// InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  var code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  var _Function = new Function(code)(),\n    Body = _Function.Body;\n  return Body;\n}\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  var code = \"\\n\".concat(getVectorCode(dimension, debugSetters), \"\\n\").concat(getBodyCode(dimension, debugSetters), \"\\nreturn {Body: Body, Vector: Vector};\\n\");\n  return code;\n}\nfunction getBodyCode(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"\\nfunction Body(\".concat(variableList, \") {\\n  this.isPinned = false;\\n  this.pos = new Vector(\").concat(variableList, \");\\n  this.force = new Vector();\\n  this.velocity = new Vector();\\n  this.mass = 1;\\n\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.reset = function() {\\n  this.force.reset();\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.setPosition = function (\").concat(variableList, \") {\\n  \").concat(pattern('this.pos.{var} = {var} || 0;', {\n    indent: 2\n  }), \"\\n};\");\n}\nfunction getVectorCode(dimension, debugSetters) {\n  var pattern = createPatternBuilder(dimension);\n  var setters = '';\n  if (debugSetters) {\n    setters = \"\".concat(pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\"));\n  }\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"function Vector(\".concat(variableList, \") {\\n  \").concat(setters, \"\\n    if (typeof arguments[0] === 'object') {\\n      // could be another vector\\n      let v = arguments[0];\\n      \").concat(pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {\n    indent: 4\n  }), \"\\n      \").concat(pattern('this.{var} = v.{var};', {\n    indent: 4\n  }), \"\\n    } else {\\n      \").concat(pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {\n    indent: 4\n  }), \"\\n    }\\n  }\\n  \\n  Vector.prototype.reset = function () {\\n    \").concat(pattern('this.{var} = ', {\n    join: ''\n  }), \"0;\\n  };\");\n}","map":{"version":3,"names":["createPatternBuilder","require","module","exports","generateCreateBodyFunction","generateCreateBodyFunctionBody","getVectorCode","getBodyCode","dimension","debugSetters","code","_Function","Function","Body","concat","pattern","variableList","join","indent","setters"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js"],"sourcesContent":["\nconst createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\n// InlineTransform: getVectorCode\nmodule.exports.getVectorCode = getVectorCode;\n// InlineTransform: getBodyCode\nmodule.exports.getBodyCode = getBodyCode;\n// InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  let code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  let {Body} = (new Function(code))();\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  let code = `\n${getVectorCode(dimension, debugSetters)}\n${getBodyCode(dimension, debugSetters)}\nreturn {Body: Body, Vector: Vector};\n`;\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let variableList = pattern('{var}', {join: ', '});\n  return `\nfunction Body(${variableList}) {\n  this.isPinned = false;\n  this.pos = new Vector(${variableList});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${variableList}) {\n  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}\n};`;\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  let pattern = createPatternBuilder(dimension);\n  let setters = '';\n  if (debugSetters) {\n    setters = `${pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\")}`;\n  }\n\n  let variableList = pattern('{var}', {join: ', '});\n  return `function Vector(${variableList}) {\n  ${setters}\n    if (typeof arguments[0] === 'object') {\n      // could be another vector\n      let v = arguments[0];\n      ${pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {indent: 4})}\n      ${pattern('this.{var} = v.{var};', {indent: 4})}\n    } else {\n      ${pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {indent: 4})}\n    }\n  }\n  \n  Vector.prototype.reset = function () {\n    ${pattern('this.{var} = ', {join: ''})}0;\n  };`;\n}"],"mappings":"AACA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AAE9DC,MAAM,CAACC,OAAO,GAAGC,0BAA0B;AAC3CF,MAAM,CAACC,OAAO,CAACE,8BAA8B,GAAGA,8BAA8B;;AAE9E;AACAH,MAAM,CAACC,OAAO,CAACG,aAAa,GAAGA,aAAa;AAC5C;AACAJ,MAAM,CAACC,OAAO,CAACI,WAAW,GAAGA,WAAW;AACxC;;AAEA,SAASH,0BAA0BA,CAACI,SAAS,EAAEC,YAAY,EAAE;EAC3D,IAAIC,IAAI,GAAGL,8BAA8B,CAACG,SAAS,EAAEC,YAAY,CAAC;EAClE,IAAAE,SAAA,GAAc,IAAIC,QAAQ,CAACF,IAAI,CAAC,CAAE,CAAC;IAA9BG,IAAI,GAAAF,SAAA,CAAJE,IAAI;EACT,OAAOA,IAAI;AACb;AAEA,SAASR,8BAA8BA,CAACG,SAAS,EAAEC,YAAY,EAAE;EAC/D,IAAIC,IAAI,QAAAI,MAAA,CACRR,aAAa,CAACE,SAAS,EAAEC,YAAY,CAAC,QAAAK,MAAA,CACtCP,WAAW,CAACC,SAAS,EAAEC,YAAY,CAAC,6CAErC;EACC,OAAOC,IAAI;AACb;AAEA,SAASH,WAAWA,CAACC,SAAS,EAAE;EAC9B,IAAIO,OAAO,GAAGf,oBAAoB,CAACQ,SAAS,CAAC;EAC7C,IAAIQ,YAAY,GAAGD,OAAO,CAAC,OAAO,EAAE;IAACE,IAAI,EAAE;EAAI,CAAC,CAAC;EACjD,0BAAAH,MAAA,CACcE,YAAY,6DAAAF,MAAA,CAEFE,YAAY,gTAAAF,MAAA,CAeGE,YAAY,aAAAF,MAAA,CACjDC,OAAO,CAAC,8BAA8B,EAAE;IAACG,MAAM,EAAE;EAAC,CAAC,CAAC;AAExD;AAEA,SAASZ,aAAaA,CAACE,SAAS,EAAEC,YAAY,EAAE;EAC9C,IAAIM,OAAO,GAAGf,oBAAoB,CAACQ,SAAS,CAAC;EAC7C,IAAIW,OAAO,GAAG,EAAE;EAChB,IAAIV,YAAY,EAAE;IAChBU,OAAO,MAAAL,MAAA,CAAMC,OAAO,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC,CAAE;EACL;EAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,OAAO,EAAE;IAACE,IAAI,EAAE;EAAI,CAAC,CAAC;EACjD,0BAAAH,MAAA,CAA0BE,YAAY,aAAAF,MAAA,CACpCK,OAAO,0HAAAL,MAAA,CAIHC,OAAO,CAAC,wHAAwH,EAAE;IAACG,MAAM,EAAE;EAAC,CAAC,CAAC,cAAAJ,MAAA,CAC9IC,OAAO,CAAC,uBAAuB,EAAE;IAACG,MAAM,EAAE;EAAC,CAAC,CAAC,4BAAAJ,MAAA,CAE7CC,OAAO,CAAC,qDAAqD,EAAE;IAACG,MAAM,EAAE;EAAC,CAAC,CAAC,sEAAAJ,MAAA,CAK7EC,OAAO,CAAC,eAAe,EAAE;IAACE,IAAI,EAAE;EAAE,CAAC,CAAC;AAE1C"},"metadata":{},"sourceType":"script","externalDependencies":[]}