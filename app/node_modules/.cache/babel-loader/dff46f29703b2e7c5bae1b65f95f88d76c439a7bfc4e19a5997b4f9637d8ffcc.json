{"ast":null,"code":"/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nmodule.exports = THREE.FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n  function FBXLoader(manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  }\n  FBXLoader.prototype = {\n    constructor: FBXLoader,\n    crossOrigin: 'anonymous',\n    load: function load(url, onLoad, onProgress, onError) {\n      var self = this;\n      var resourceDirectory = THREE.LoaderUtils.extractUrlBase(url);\n      var loader = new THREE.FileLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        try {\n          var scene = self.parse(buffer, resourceDirectory);\n          onLoad(scene);\n        } catch (error) {\n          setTimeout(function () {\n            if (onError) onError(error);\n            self.manager.itemError(url);\n          }, 0);\n        }\n      }, onProgress, onError);\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    parse: function parse(FBXBuffer, resourceDirectory) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n        fbxTree = new TextParser().parse(FBXText);\n      }\n\n      //console.log( FBXTree );\n\n      var textureLoader = new THREE.TextureLoader(this.manager).setPath(resourceDirectory).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader).parse(fbxTree);\n    }\n  };\n\n  // Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n  function FBXTreeParser(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function parseConnections() {\n      var connectionMap = new Map();\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function parseImages() {\n      var images = {};\n      var blobs = {};\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename;\n\n          // raw image data is in videoNode.Content\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n      for (var id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n        case 'png':\n          type = 'image/png';\n          break;\n        case 'tif':\n          type = 'image/tiff';\n          break;\n        case 'tga':\n          if (typeof THREE.TGALoader !== 'function') {\n            console.warn('FBXLoader: THREE.TGALoader is required to load TGA textures');\n            return;\n          } else {\n            if (THREE.Loader.Handlers.get('.tga') === null) {\n              THREE.Loader.Handlers.add(/\\.tga$/i, new THREE.TGALoader());\n            }\n            type = 'image/tga';\n            break;\n          }\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n      if (typeof content === 'string') {\n        // ASCII format\n\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function parseTextures(images) {\n      var textureMap = new Map();\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n      // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n    loadTexture: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n      if (extension === 'tga') {\n        var loader = THREE.Loader.Handlers.get('.tga');\n        if (loader === null) {\n          console.warn('FBXLoader: TGALoader not found, creating empty placeholder texture for', fileName);\n          texture = new THREE.Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating empty placeholder texture for', fileName);\n        texture = new THREE.Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel;\n\n      // Case where FBX wraps shading model in property object.\n      if (typeof type === 'object') {\n        type = type.value;\n      }\n\n      // Ignore unused materials which don't have any connections.\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new THREE.MeshPhongMaterial();\n          break;\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new THREE.MeshPhongMaterial({\n            color: 0x3300ff\n          });\n          break;\n      }\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n      if (materialNode.Diffuse) {\n        parameters.color = new THREE.Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color') {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new THREE.Color().fromArray(materialNode.DiffuseColor.value);\n      }\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n      if (materialNode.Emissive) {\n        parameters.emissive = new THREE.Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color') {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new THREE.Color().fromArray(materialNode.EmissiveColor.value);\n      }\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n      if (materialNode.Specular) {\n        parameters.specular = new THREE.Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new THREE.Color().fromArray(materialNode.SpecularColor.value);\n      }\n      var self = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = self.getTexture(textureMap, child.ID);\n            break;\n          case 'DiffuseColor':\n            parameters.map = self.getTexture(textureMap, child.ID);\n            break;\n          case 'DisplacementColor':\n            parameters.displacementMap = self.getTexture(textureMap, child.ID);\n            break;\n          case 'EmissiveColor':\n            parameters.emissiveMap = self.getTexture(textureMap, child.ID);\n            break;\n          case 'NormalMap':\n            parameters.normalMap = self.getTexture(textureMap, child.ID);\n            break;\n          case 'ReflectionColor':\n            parameters.envMap = self.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n            break;\n          case 'SpecularColor':\n            parameters.specularMap = self.getTexture(textureMap, child.ID);\n            break;\n          case 'TransparentColor':\n            parameters.alphaMap = self.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n          case 'SpecularFactor': // AKA specularLevel\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transform: new THREE.Matrix4().fromArray(boneNode.Transform.a),\n          transformLink: new THREE.Matrix4().fromArray(boneNode.TransformLink.a),\n          linkMode: boneNode.Mode\n        };\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n      for (var i = 0; i < relationships.children.length; i++) {\n        if (i === 8) {\n          console.warn('FBXLoader: maximum of 8 morph targets supported. Ignoring additional targets.');\n          break;\n        }\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        var targetRelationships = connections.get(parseInt(child.ID));\n        targetRelationships.children.forEach(function (child) {\n          if (child.relationship === undefined) rawMorphTarget.geoID = child.ID;\n        });\n        rawMorphTargets.push(rawMorphTarget);\n      }\n      return rawMorphTargets;\n    },\n    // create the main THREE.Group() to be returned by the loader\n    parseScene: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new THREE.Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var self = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        self.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      var animations = new AnimationParser().parse();\n\n      // if all the models where already combined in a single group, just return that\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n            case 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead\n            case 'Null':\n            default:\n              model = new THREE.Group();\n              break;\n          }\n          model.name = THREE.PropertyBinding.sanitizeNodeName(node.attrName);\n          model.ID = id;\n        }\n        this.setModelTransforms(model, node);\n        modelMap.set(id, model);\n      }\n      return modelMap;\n    },\n    buildSkeleton: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (var ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new THREE.Bone();\n              bone.matrixWorld.copy(rawBone.transformLink);\n\n              // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n              bone.name = THREE.PropertyBinding.sanitizeNodeName(name);\n              bone.ID = id;\n              skeleton.bones[i] = bone;\n\n              // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n    createCamera: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n      if (cameraAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type = 0;\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n        var nearClippingPlane = 1;\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n        var farClippingPlane = 1000;\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n        var aspect = width / height;\n        var fov = 45;\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new THREE.PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n          case 1:\n            // Orthographic\n            model = new THREE.OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new THREE.Object3D();\n            break;\n        }\n      }\n      return model;\n    },\n    // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n    createLight: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n      if (lightAttribute === undefined) {\n        model = new THREE.Object3D();\n      } else {\n        var type;\n\n        // LightType can be undefined for Point lights\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n        var color = 0xffffff;\n        if (lightAttribute.Color !== undefined) {\n          color = new THREE.Color().fromArray(lightAttribute.Color.value);\n        }\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100;\n\n        // light disabled\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n        var distance = 0;\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        }\n\n        // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n        var decay = 1;\n        switch (type) {\n          case 0:\n            // Point\n            model = new THREE.PointLight(color, intensity, distance, decay);\n            break;\n          case 1:\n            // Directional\n            model = new THREE.DirectionalLight(color, intensity);\n            break;\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = THREE.Math.degToRad(lightAttribute.InnerAngle.value);\n            }\n            var penumbra = 0;\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = THREE.Math.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n            model = new THREE.SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.');\n            model = new THREE.PointLight(color, intensity);\n            break;\n        }\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n      return model;\n    },\n    createMesh: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = [];\n\n      // get geometry and materials(s) from connections\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new THREE.MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = THREE.VertexColors;\n        });\n      }\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new THREE.SkinnedMesh(geometry, material);\n      } else {\n        model = new THREE.Mesh(geometry, material);\n      }\n      return model;\n    },\n    createCurve: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null);\n\n      // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n      var material = new THREE.LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new THREE.Line(geometry, material);\n    },\n    // parse the model node for transform details and apply them to the model\n    setModelTransforms: function setModelTransforms(model, modelNode) {\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = parseInt(modelNode.RotationOrder.value);\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      var transform = generateTransform(transformData);\n      model.applyMatrix(transform);\n    },\n    setLookAtProperties: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value;\n\n              // DirectionalLight, SpotLight\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n\n                model.lookAt(new THREE.Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n      for (var ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new THREE.Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function parsePoseNodes() {\n      var bindMatrices = {};\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new THREE.Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new THREE.Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new THREE.Color(r, g, b);\n          sceneGraph.add(new THREE.AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function setupMorphMaterials() {\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position || child.geometry.morphAttributes.normal) {\n            var uuid = child.uuid;\n            var matUuid = child.material.uuid;\n\n            // if a geometry has morph targets, it cannot share the material with other geometries\n            var sharedMat = false;\n            sceneGraph.traverse(function (child) {\n              if (child.isMesh) {\n                if (child.material.uuid === matUuid && child.uuid !== uuid) sharedMat = true;\n              }\n            });\n            if (sharedMat === true) child.material = child.material.clone();\n            child.material.morphTargets = true;\n          }\n        }\n      });\n    }\n  };\n\n  // parse Geometry data from FBXTree and return map of BufferGeometries\n  function GeometryParser() {}\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function parse(deformers) {\n      var geometryMap = new Map();\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n          break;\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n          break;\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = deformers.morphTargets;\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      });\n\n      // don't create geometry if it is not associated with any models\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      var morphTarget = relationships.children.reduce(function (morphTarget, child) {\n        if (morphTargets[child.ID] !== undefined) morphTarget = morphTargets[child.ID];\n        return morphTarget;\n      }, null);\n\n      // TODO: if there is more than one model associated with the geometry, AND the models have\n      // different geometric transforms, then this will cause problems\n      // if ( modelNodes.length > 1 ) { }\n\n      // For now just assume one model and get the preRotations from that\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = modelNode.RotationOrder.value;\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTarget, transform);\n    },\n    // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function genGeometry(geoNode, skeleton, morphTarget, preTransform) {\n      var geo = new THREE.BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(buffers.vertex, 3);\n      preTransform.applyToBufferAttribute(positionAttribute);\n      geo.addAttribute('position', positionAttribute);\n      if (buffers.colors.length > 0) {\n        geo.addAttribute('color', new THREE.Float32BufferAttribute(buffers.colors, 3));\n      }\n      if (skeleton) {\n        geo.addAttribute('skinIndex', new THREE.Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.addAttribute('skinWeight', new THREE.Float32BufferAttribute(buffers.vertexWeights, 4));\n\n        // used later to bind the skeleton to the model\n        geo.FBX_Deformer = skeleton;\n      }\n      if (buffers.normal.length > 0) {\n        var normalAttribute = new THREE.Float32BufferAttribute(buffers.normal, 3);\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(preTransform);\n        normalMatrix.applyToBufferAttribute(normalAttribute);\n        geo.addAttribute('normal', normalAttribute);\n      }\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString();\n\n        // the first uv buffer is just called 'uv'\n        if (i === 0) {\n          name = 'uv';\n        }\n        geo.addAttribute(name, new THREE.Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        });\n\n        // the loop above doesn't add the last group, do that here.\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        }\n\n        // case where there are multiple materials but the whole geometry is only\n        // using one of them\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n      this.addMorphTargets(geo, geoNode, morphTarget, preTransform);\n      return geo;\n    },\n    parseGeoNode: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n        while (geoNode.LayerElementUV[i]) {\n          geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          i++;\n        }\n      }\n      geoInfo.weightTable = {};\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n      return geoInfo;\n    },\n    genBuffers: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false;\n\n      // these will hold data for a single face\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var self = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false;\n\n        // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n          endOfFace = true;\n        }\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          }\n\n          // if the weight array is shorter than 4 pad with 0s\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n        faceLength++;\n        if (endOfFace) {\n          self.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0;\n\n          // reset arrays for the next face\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (var i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function addMorphTargets(parentGeo, parentGeoNode, morphTarget, preTransform) {\n      if (morphTarget === null) return;\n      parentGeo.morphAttributes.position = [];\n      parentGeo.morphAttributes.normal = [];\n      var self = this;\n      morphTarget.rawTargets.forEach(function (rawTarget) {\n        var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n        if (morphGeoNode !== undefined) {\n          self.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform);\n        }\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform) {\n      var morphGeo = new THREE.BufferGeometry();\n      if (morphGeoNode.attrName) morphGeo.name = morphGeoNode.attrName;\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n\n      // make a copy of the parent's vertex positions\n      var vertexPositions = parentGeoNode.Vertices !== undefined ? parentGeoNode.Vertices.a.slice() : [];\n      var morphPositions = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n\n        // FBX format uses blend shapes rather than morph targets. This can be converted\n        // by additively combining the blend shape positions with the original geometry's positions\n        vertexPositions[morphIndex] += morphPositions[i * 3];\n        vertexPositions[morphIndex + 1] += morphPositions[i * 3 + 1];\n        vertexPositions[morphIndex + 2] += morphPositions[i * 3 + 2];\n      }\n\n      // TODO: add morph normal support\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: vertexPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new THREE.Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = morphGeoNode.attrName;\n      preTransform.applyToBufferAttribute(positionAttribute);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n      var materialIndexBuffer = MaterialNode.Materials.a;\n\n      // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n      var materialIndices = [];\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function parseNurbsGeometry(geoNode) {\n      if (THREE.NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new THREE.BufferGeometry();\n      }\n      var order = parseInt(geoNode.Order);\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new THREE.BufferGeometry();\n      }\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new THREE.Vector4().fromArray(pointsValues, i));\n      }\n      var startKnot, endKnot;\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n        for (var i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n      var curve = new THREE.NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new THREE.BufferGeometry();\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n      return geometry;\n    }\n  };\n\n  // parse animation data from FBXTree\n  function AnimationParser() {}\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n      if (rawClips === undefined) return animationClips;\n      for (var key in rawClips) {\n        var rawClip = rawClips[key];\n        var clip = this.addClip(rawClip);\n        animationClips.push(clip);\n      }\n      return animationClips;\n    },\n    parseClips: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve;\n\n      // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n      for (var nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          var self = this;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID);\n\n              // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID;\n                  connections.get(child.ID).parents.forEach(function (parent) {\n                    if (parent.relationship !== undefined) modelID = parent.ID;\n                  });\n                  var rawModel = fbxTree.Objects.Model[modelID.toString()];\n                  var node = {\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                    initialPosition: [0, 0, 0],\n                    initialRotation: [0, 0, 0],\n                    initialScale: [1, 1, 1],\n                    transform: self.getModelAnimTransform(rawModel)\n                  };\n\n                  // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                  // animation value as well\n                  if ('PreRotation' in rawModel) node.preRotations = rawModel.PreRotation.value;\n                  if ('PostRotation' in rawModel) node.postRotations = rawModel.PostRotation.value;\n                  layerCurveNodes[i] = node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID;\n                  connections.get(child.ID).parents.forEach(function (parent) {\n                    if (parent.relationship !== undefined) deformerID = parent.ID;\n                  });\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID;\n\n                  // assuming geometry is not used in more than one model\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: THREE.PropertyBinding.sanitizeNodeName(rawModel.attrName),\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n      return layersMap;\n    },\n    getModelAnimTransform: function getModelAnimTransform(modelNode) {\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = parseInt(modelNode.RotationOrder.value);\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      return generateTransform(transformData);\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n    parseAnimStacks: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack;\n\n      // connect the stacks (clips) up to the layers\n      var rawClips = {};\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n      return rawClips;\n    },\n    addClip: function addClip(rawClip) {\n      var tracks = [];\n      var self = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(self.generateTracks(rawTracks));\n      });\n      return new THREE.AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new THREE.Vector3();\n      var initialRotation = new THREE.Quaternion();\n      var initialScale = new THREE.Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new THREE.Euler().setFromQuaternion(initialRotation).toArray(); // todo: euler order\n      initialScale = initialScale.toArray();\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotations, rawTracks.postRotations);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n      return tracks;\n    },\n    generateVectorTrack: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new THREE.VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function generateRotationTrack(modelName, curves, initialValue, preRotations, postRotations) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(THREE.Math.degToRad);\n      }\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(THREE.Math.degToRad);\n      }\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(THREE.Math.degToRad);\n      }\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      if (preRotations !== undefined) {\n        preRotations = preRotations.map(THREE.Math.degToRad);\n        preRotations.push('ZYX');\n        preRotations = new THREE.Euler().fromArray(preRotations);\n        preRotations = new THREE.Quaternion().setFromEuler(preRotations);\n      }\n      if (postRotations !== undefined) {\n        postRotations = postRotations.map(THREE.Math.degToRad);\n        postRotations.push('ZYX');\n        postRotations = new THREE.Euler().fromArray(postRotations);\n        postRotations = new THREE.Quaternion().setFromEuler(postRotations).inverse();\n      }\n      var quaternion = new THREE.Quaternion();\n      var euler = new THREE.Euler();\n      var quaternionValues = [];\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], 'ZYX');\n        quaternion.setFromEuler(euler);\n        if (preRotations !== undefined) quaternion.premultiply(preRotations);\n        if (postRotations !== undefined) quaternion.multiply(postRotations);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n      return new THREE.QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new THREE.NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function getTimesForAllAxes(curves) {\n      var times = [];\n\n      // first join together the times for each axis, if defined\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times);\n\n      // then sort them and remove duplicates\n      times = times.sort(function (a, b) {\n        return a - b;\n      }).filter(function (elem, index, array) {\n        return array.indexOf(elem) == index;\n      });\n      return times;\n    },\n    getKeyframeTrackValues: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time);\n\n        // if there is an x value defined for this frame, use that\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  };\n\n  // parse an FBX file in ASCII format\n  function TextParser() {}\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function getCurrentProp() {\n      return this.currentProp;\n    },\n    pushStack: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function parse(text) {\n      this.currentIndent = 0;\n      console.log(\"FBXTree: \", FBXTree);\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var self = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + self.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (self.currentIndent - 1) + '}}');\n        if (matchBeginning) {\n          self.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          self.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          self.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          self.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode();\n\n      // a top node\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n      var name = '',\n        type = '';\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim();\n\n      // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      }\n\n      // Connections\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      }\n\n      // Node\n      if (propName === 'Node') currentNode.id = propValue;\n\n      // connections\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n      this.setCurrentProp(currentNode, propName);\n\n      // convert string to array, unless it ends in ',' in which case more will be added to it\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line;\n\n      // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4];\n\n      // cast values where needed, otherwise leave as strings\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      }\n\n      // CAUTION: these props must append to parent's parent\n      this.getPrevNode()[innerPropName] = {\n        'type': innerPropType1,\n        'type2': innerPropType2,\n        'flag': innerPropFlag,\n        'value': innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  };\n\n  // Parse an FBX file in Binary format\n  function BinaryParser() {}\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n      console.log('THREE.FBXLoader: FBX binary version: ' + version);\n      var allNodes = new FBXTree();\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function parseNode(reader, version) {\n      var node = {};\n\n      // The first three data sizes depends on version.\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n\n      // note: do not remove this even if you get a linter warning as it moves the buffer forward\n      var propertyListLen = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen);\n\n      // Regards this node as NULL-record if endOffset is zero\n      if (endOffset === 0) return null;\n      var propertyList = [];\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      }\n\n      // Regards the first three elements in propertyList as id, attrName, and attrType\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : '';\n\n      // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        }\n\n        // this will be copied to parent, see above\n        node[innerPropName] = {\n          'type': innerPropType1,\n          'type2': innerPropType2,\n          'flag': innerPropFlag,\n          'value': innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function parseProperty(reader) {\n      var type = reader.getString(1);\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n        case 'D':\n          return reader.getFloat64();\n        case 'F':\n          return reader.getFloat32();\n        case 'I':\n          return reader.getInt32();\n        case 'L':\n          return reader.getInt64();\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n        case 'Y':\n          return reader.getInt16();\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n          var compressedLength = reader.getUint32();\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n          if (typeof Zlib === 'undefined') {\n            console.error('THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js');\n          }\n          var inflate = new Zlib.Inflate(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n          var reader2 = new BinaryReader(inflate.decompress().buffer);\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function getOffset() {\n      return this.offset;\n    },\n    size: function size() {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function skip(length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function getBooleanArray(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n      return a;\n    },\n    getUint8: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function getInt32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n      return a;\n    },\n    getUint32: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function getInt64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      // calculate negative value\n      if (high & 0x80000000) {\n        high = ~high & 0xFFFFFFFF;\n        low = ~low & 0xFFFFFFFF;\n        if (low === 0xFFFFFFFF) high = high + 1 & 0xFFFFFFFF;\n        low = low + 1 & 0xFFFFFFFF;\n        return -(high * 0x100000000 + low);\n      }\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function getInt64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function getUint64() {\n      var low, high;\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function getFloat32Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n      return a;\n    },\n    getFloat64: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function getFloat64Array(size) {\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n      return a;\n    },\n    getArrayBuffer: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return THREE.LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  };\n\n  // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n  function FBXTree() {}\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function add(key, val) {\n      this[key] = val;\n    }\n  };\n\n  // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n    for (var i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  }\n\n  // Converts FBX ticks into real time seconds.\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n  var dataArray = [];\n\n  // extracts the data from the correct position in the FBX array based on indexing type\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n  var tempMat = new THREE.Matrix4();\n  var tempEuler = new THREE.Euler();\n  var tempVec = new THREE.Vector3();\n  var translation = new THREE.Vector3();\n  var rotation = new THREE.Matrix4();\n\n  // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // transformData = {\n  //\t eulerOrder: int,\n  //\t translation: [],\n  //   rotationOffset: [],\n  //\t preRotation\n  //\t rotation\n  //\t postRotation\n  //   scale\n  // }\n  // all entries are optional\n  function generateTransform(transformData) {\n    var transform = new THREE.Matrix4();\n    translation.set(0, 0, 0);\n    rotation.identity();\n    var order = transformData.eulerOrder ? getEulerOrder(transformData.eulerOrder) : getEulerOrder(0);\n    if (transformData.translation) translation.fromArray(transformData.translation);\n    if (transformData.rotationOffset) translation.add(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(THREE.Math.degToRad);\n      array.push(order);\n      rotation.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(THREE.Math.degToRad);\n      array.push(order);\n      tempMat.makeRotationFromEuler(tempEuler.fromArray(array));\n      rotation.premultiply(tempMat);\n    }\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(THREE.Math.degToRad);\n      array.push(order);\n      tempMat.makeRotationFromEuler(tempEuler.fromArray(array));\n      tempMat.getInverse(tempMat);\n      rotation.multiply(tempMat);\n    }\n    if (transformData.scale) transform.scale(tempVec.fromArray(transformData.scale));\n    transform.setPosition(translation);\n    transform.multiply(rotation);\n    return transform;\n  }\n\n  // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n  function getEulerOrder(order) {\n    var enums = ['ZYX',\n    // -> XYZ extrinsic\n    'YZX',\n    // -> XZY extrinsic\n    'XZY',\n    // -> YZX extrinsic\n    'ZXY',\n    // -> YXZ extrinsic\n    'YXZ',\n    // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n    return enums[order];\n  }\n\n  // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return THREE.LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n  function append(a, b) {\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n  function slice(a, b, from, to) {\n    for (var i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n    return a;\n  }\n\n  // inject array a2 into array a1 at index\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n  return FBXLoader;\n}();","map":{"version":3,"names":["module","exports","THREE","FBXLoader","fbxTree","connections","sceneGraph","manager","undefined","DefaultLoadingManager","prototype","constructor","crossOrigin","load","url","onLoad","onProgress","onError","self","resourceDirectory","LoaderUtils","extractUrlBase","loader","FileLoader","setResponseType","buffer","scene","parse","error","setTimeout","itemError","setCrossOrigin","value","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","setPath","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","TGALoader","console","warn","Loader","Handlers","add","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","x","y","currentPath","path","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","color","setValues","BumpFactor","bumpScale","Diffuse","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","map","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transform","Matrix4","Transform","a","transformLink","TransformLink","linkMode","Mode","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","targetRelationships","geoID","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","bindSkeleton","createAmbientLight","setupMorphMaterials","animations","AnimationParser","isGroup","node","buildSkeleton","createCamera","createLight","createMesh","createCurve","PropertyBinding","sanitizeNodeName","setModelTransforms","bone","subBone","Bone","matrixWorld","copy","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","PointLight","DirectionalLight","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","VertexColors","FBX_Deformer","skinning","SkinnedMesh","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","transformData","eulerOrder","RotationOrder","translation","Lcl_Translation","rotationOffset","RotationOffset","rotation","Lcl_Rotation","preRotation","PreRotation","postRotation","PostRotation","scale","Lcl_Scaling","generateTransform","applyMatrix","lookAtTarget","pos","target","position","lookAt","Vector3","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","Skeleton","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","AmbientLight","traverse","isMesh","morphAttributes","normal","uuid","matUuid","sharedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","applyToBufferAttribute","addAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normalAttribute","normalMatrix","Matrix3","getNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","parseUVs","weightTable","index","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphGeo","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","Vector4","startKnot","endKnot","Form","curve","vertices","getPoints","positions","Float32Array","toArray","BufferAttribute","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","getModelAnimTransform","preRotations","postRotations","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","inverse","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","filter","elem","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","log","FBXTree","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","propertyListLen","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","Zlib","inflate","Inflate","reader2","decompress","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempMat","tempEuler","tempVec","identity","getEulerOrder","makeRotationFromEuler","getInverse","setPosition","enums","a1","a2"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/aframe-extras/lib/FBXLoader.js"],"sourcesContent":["/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nmodule.exports = THREE.FBXLoader = ( function () {\n\n\tvar fbxTree;\n\tvar connections;\n\tvar sceneGraph;\n\n\tfunction FBXLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t}\n\n\tFBXLoader.prototype = {\n\n\t\tconstructor: FBXLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\t\tvar self = this;\n\n\t\t\tvar resourceDirectory = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar scene = self.parse( buffer, resourceDirectory );\n\t\t\t\t\tonLoad( scene );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( FBXBuffer, resourceDirectory ) {\n\n\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t}\n\n\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t}\n\n\t\t\t//console.log( FBXTree );\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( resourceDirectory ).setCrossOrigin( this.crossOrigin );\n\n\t\t\treturn new FBXTreeParser( textureLoader ).parse( fbxTree );\n\n\t\t}\n\n\t};\n\n\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\tfunction FBXTreeParser( textureLoader ) {\n\n\t\tthis.textureLoader = textureLoader;\n\n\t}\n\n\tFBXTreeParser.prototype = {\n\n\t\tconstructor: FBXTreeParser,\n\n\t\tparse: function () {\n\n\t\t\tconnections = this.parseConnections();\n\n\t\t\tvar images = this.parseImages();\n\t\t\tvar textures = this.parseTextures( images );\n\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\tvar deformers = this.parseDeformers();\n\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\treturn sceneGraph;\n\n\t\t},\n\n\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t// and details the connection type\n\t\tparseConnections: function () {\n\n\t\t\tvar connectionMap = new Map();\n\n\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn connectionMap;\n\n\t\t},\n\n\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t// via FBXTree.Connections.\n\t\tparseImages: function () {\n\n\t\t\tvar images = {};\n\t\t\tvar blobs = {};\n\n\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var id in images ) {\n\n\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\tparseImage: function ( videoNode ) {\n\n\t\t\tvar content = videoNode.Content;\n\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\tvar type;\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'bmp':\n\n\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'jpg':\n\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'png':\n\n\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tif':\n\n\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tga':\n\n\t\t\t\t\tif ( typeof THREE.TGALoader !== 'function' ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: THREE.TGALoader is required to load TGA textures' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( THREE.Loader.Handlers.get( '.tga' ) === null ) {\n\n\t\t\t\t\t\t\tTHREE.Loader.Handlers.add( /\\.tga$/i, new THREE.TGALoader() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t} else { // Binary Format\n\n\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t// to images in FBXTree.Objects.Video\n\t\tparseTextures: function ( images ) {\n\n\t\t\tvar textureMap = new Map();\n\n\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textureMap;\n\n\t\t},\n\n\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\ttexture.ID = textureNode.id;\n\n\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\tvar fileName;\n\n\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar texture;\n\n\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( '.tga' );\n\n\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGALoader not found, creating empty placeholder texture for', fileName );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating empty placeholder texture for', fileName );\n\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t} else {\n\n\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t}\n\n\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Material\n\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\tvar materialMap = new Map();\n\n\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Material\n\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\tvar ID = materialNode.id;\n\t\t\tvar name = materialNode.attrName;\n\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\ttype = type.value;\n\n\t\t\t}\n\n\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\tvar material;\n\n\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0x3300ff } );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.setValues( parameters );\n\t\t\tmaterial.name = name;\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t// Also parse the texture map and return any textures associated with the material\n\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\tvar parameters = {};\n\n\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t}\n\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\tparameters.transparent = true;\n\n\t\t\t}\n\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\tvar type = child.relationship;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn parameters;\n\n\t\t},\n\n\t\t// get a texture from the textureMap for use by a material.\n\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t}\n\n\t\t\treturn textureMap.get( id );\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\tparseDeformers: function () {\n\n\t\t\tvar skeletons = {};\n\t\t\tvar morphTargets = {};\n\n\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\tskeletons: skeletons,\n\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawBones = [];\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\tvar rawBone = {\n\n\t\t\t\t\tID: child.ID,\n\t\t\t\t\tindices: [],\n\t\t\t\t\tweights: [],\n\t\t\t\t\ttransform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\tlinkMode: boneNode.Mode,\n\n\t\t\t\t};\n\n\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t}\n\n\t\t\t\trawBones.push( rawBone );\n\n\t\t\t} );\n\n\t\t\treturn {\n\n\t\t\t\trawBones: rawBones,\n\t\t\t\tbones: []\n\n\t\t\t};\n\n\t\t},\n\n\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawMorphTargets = [];\n\n\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\tif ( i === 8 ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: maximum of 8 morph targets supported. Ignoring additional targets.' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t};\n\n\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\tvar targetRelationships = connections.get( parseInt( child.ID ) );\n\n\t\t\t\ttargetRelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === undefined ) rawMorphTarget.geoID = child.ID;\n\n\t\t\t\t} );\n\n\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t}\n\n\t\t\treturn rawMorphTargets;\n\n\t\t},\n\n\t\t// create the main THREE.Group() to be returned by the loader\n\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tvar self = this;\n\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t}\n\n\n\t\t\t} );\n\n\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\tthis.createAmbientLight();\n\n\t\t\tthis.setupMorphMaterials();\n\n\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t}\n\n\t\t\tsceneGraph.animations = animations;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.Model\n\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\tvar modelMap = new Map();\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead\n\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );\n\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t}\n\n\t\t\t\tthis.setModelTransforms( model, node );\n\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t}\n\n\t\t\treturn modelMap;\n\n\t\t},\n\n\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\tvar bone = null;\n\n\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\tbone = new THREE.Bone();\n\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\t\t\t\t\t\t\tbone.name = THREE.PropertyBinding.sanitizeNodeName( name );\n\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn bone;\n\n\t\t},\n\n\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\tcreateCamera: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar cameraAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type = 0;\n\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\ttype = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t}\n\n\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t}\n\n\n\t\t\t\tvar width = window.innerWidth;\n\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar aspect = width / height;\n\n\t\t\t\tvar fov = 45;\n\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\tcreateLight: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar lightAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type;\n\n\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\ttype = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t// light disabled\n\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\tintensity = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = 0;\n\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\tvar decay = 1;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\tangle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\tpenumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\tvar model;\n\t\t\tvar geometry = null;\n\t\t\tvar material = null;\n\t\t\tvar materials = [];\n\n\t\t\t// get geometry and materials(s) from connections\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\tmaterial = materials;\n\n\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t} );\n\n\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t} else {\n\n\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\treturn geo;\n\n\t\t\t}, null );\n\n\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t},\n\n\t\t// parse the model node for transform details and apply them to the model\n\t\tsetModelTransforms: function ( model, modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\tmodel.applyMatrix( transform );\n\n\t\t},\n\n\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparsePoseNodes: function () {\n\n\t\t\tvar bindMatrices = {};\n\n\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bindMatrices;\n\n\t\t},\n\n\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\tcreateAmbientLight: function () {\n\n\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetupMorphMaterials: function () {\n\n\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\tif ( child.geometry.morphAttributes.position || child.geometry.morphAttributes.normal ) {\n\n\t\t\t\t\t\tvar uuid = child.uuid;\n\t\t\t\t\t\tvar matUuid = child.material.uuid;\n\n\t\t\t\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\t\t\t\tvar sharedMat = false;\n\n\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\t\t\tif ( child.material.uuid === matUuid && child.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( sharedMat === true ) child.material = child.material.clone();\n\n\t\t\t\t\t\tchild.material.morphTargets = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t};\n\n\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\tfunction GeometryParser() {}\n\n\tGeometryParser.prototype = {\n\n\t\tconstructor: GeometryParser,\n\n\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\tparse: function ( deformers ) {\n\n\t\t\tvar geometryMap = new Map();\n\n\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometryMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tvar skeletons = deformers.skeletons;\n\t\t\tvar morphTargets = deformers.morphTargets;\n\n\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t} );\n\n\t\t\t// don't create geometry if it is not associated with any models\n\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\treturn skeleton;\n\n\t\t\t}, null );\n\n\t\t\tvar morphTarget = relationships.children.reduce( function ( morphTarget, child ) {\n\n\t\t\t\tif ( morphTargets[ child.ID ] !== undefined ) morphTarget = morphTargets[ child.ID ];\n\n\t\t\t\treturn morphTarget;\n\n\t\t\t}, null );\n\n\t\t\t// TODO: if there is more than one model associated with the geometry, AND the models have\n\t\t\t// different geometric transforms, then this will cause problems\n\t\t\t// if ( modelNodes.length > 1 ) { }\n\n\t\t\t// For now just assume one model and get the preRotations from that\n\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = modelNode.RotationOrder.value;\n\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\treturn this.genGeometry( geoNode, skeleton, morphTarget, transform );\n\n\t\t},\n\n\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\tgenGeometry: function ( geoNode, skeleton, morphTarget, preTransform ) {\n\n\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tgeo.addAttribute( 'position', positionAttribute );\n\n\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\tgeo.addAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tgeo.addAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\tgeo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t}\n\n\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normalAttribute );\n\n\t\t\t\tgeo.addAttribute( 'normal', normalAttribute );\n\n\t\t\t}\n\n\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tname = 'uv';\n\n\t\t\t\t}\n\n\t\t\t\tgeo.addAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t} );\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\tvar startIndex = 0;\n\n\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t// using one of them\n\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addMorphTargets( geo, geoNode, morphTarget, preTransform );\n\n\t\t\treturn geo;\n\n\t\t},\n\n\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\tvar geoInfo = {};\n\n\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\tvar i = 0;\n\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\ti ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeoInfo.weightTable = {};\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn geoInfo;\n\n\t\t},\n\n\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\tvar buffers = {\n\t\t\t\tvertex: [],\n\t\t\t\tnormal: [],\n\t\t\t\tcolors: [],\n\t\t\t\tuvs: [],\n\t\t\t\tmaterialIndex: [],\n\t\t\t\tvertexWeights: [],\n\t\t\t\tweightsIndices: [],\n\t\t\t};\n\n\t\t\tvar polygonIndex = 0;\n\t\t\tvar faceLength = 0;\n\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t// these will hold data for a single face\n\t\t\tvar facePositionIndexes = [];\n\t\t\tvar faceNormals = [];\n\t\t\tvar faceColors = [];\n\t\t\tvar faceUVs = [];\n\t\t\tvar faceWeights = [];\n\t\t\tvar faceWeightIndices = [];\n\n\t\t\tvar self = this;\n\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t//  }\n\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar weightIndices = [];\n\t\t\t\tvar weights = [];\n\n\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tfaceLength ++;\n\n\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\tfaceColors = [];\n\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn buffers;\n\n\t\t},\n\n\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTarget, preTransform ) {\n\n\t\t\tif ( morphTarget === null ) return;\n\n\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\tparentGeo.morphAttributes.normal = [];\n\n\t\t\tvar self = this;\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform ) {\n\n\t\t\tvar morphGeo = new THREE.BufferGeometry();\n\t\t\tif ( morphGeoNode.attrName ) morphGeo.name = morphGeoNode.attrName;\n\n\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t// make a copy of the parent's vertex positions\n\t\t\tvar vertexPositions = ( parentGeoNode.Vertices !== undefined ) ? parentGeoNode.Vertices.a.slice() : [];\n\n\t\t\tvar morphPositions = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t// FBX format uses blend shapes rather than morph targets. This can be converted\n\t\t\t\t// by additively combining the blend shape positions with the original geometry's positions\n\t\t\t\tvertexPositions[ morphIndex ] += morphPositions[ i * 3 ];\n\t\t\t\tvertexPositions[ morphIndex + 1 ] += morphPositions[ i * 3 + 1 ];\n\t\t\t\tvertexPositions[ morphIndex + 2 ] += morphPositions[ i * 3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// TODO: add morph normal support\n\t\t\tvar morphGeoInfo = {\n\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\tvertexPositions: vertexPositions,\n\t\t\t};\n\n\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\tpositionAttribute.name = morphGeoNode.attrName;\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t},\n\n\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 3,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\tparseUVs: function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 4,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\tvar materialIndices = [];\n\n\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\tindices: materialIndices,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar degree = order - 1;\n\n\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\tvar controlPoints = [];\n\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t}\n\n\t\t\tvar startKnot, endKnot;\n\n\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\tstartKnot = degree;\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t} );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t};\n\n\t// parse animation data from FBXTree\n\tfunction AnimationParser() {}\n\n\tAnimationParser.prototype = {\n\n\t\tconstructor: AnimationParser,\n\n\t\t// take raw animation clips and turn them into three.js animation clips\n\t\tparse: function () {\n\n\t\t\tvar animationClips = [];\n\n\n\t\t\tvar rawClips = this.parseClips();\n\n\t\t\tif ( rawClips === undefined ) return animationClips;\n\n\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animationClips;\n\n\t\t},\n\n\t\tparseClips: function () {\n\n\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t// and is referenced by an AnimationLayer\n\t\tparseAnimationCurveNodes: function () {\n\n\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\tvar curveNodesMap = new Map();\n\n\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t};\n\n\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn curveNodesMap;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t// axis ( e.g. times and values of x rotation)\n\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t// clearly, this should be optimised to\n\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t};\n\n\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\tvar layersMap = new Map();\n\n\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar modelID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) modelID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\t\t\t\t\t\t\t\t\t\ttransform: self.getModelAnimTransform( rawModel ),\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotations = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotations = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar deformerID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) deformerID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn layersMap;\n\n\t\t},\n\n\t\tgetModelAnimTransform: function ( modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\treturn generateTransform( transformData );\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t// connect the stacks (clips) up to the layers\n\t\t\tvar rawClips = {};\n\n\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\tlayer: layer,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\taddClip: function ( rawClip ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar self = this;\n\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t} );\n\n\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t},\n\n\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation ).toArray(); // todo: euler order\n\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotations, rawTracks.postRotations );\n\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t},\n\n\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t},\n\n\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotations, postRotations ) {\n\n\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\tcurves.x.values = curves.x.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\tcurves.y.values = curves.y.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\tcurves.z.values = curves.z.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\tif ( preRotations !== undefined ) {\n\n\t\t\t\tpreRotations = preRotations.map( THREE.Math.degToRad );\n\t\t\t\tpreRotations.push( 'ZYX' );\n\n\t\t\t\tpreRotations = new THREE.Euler().fromArray( preRotations );\n\t\t\t\tpreRotations = new THREE.Quaternion().setFromEuler( preRotations );\n\n\t\t\t}\n\n\t\t\tif ( postRotations !== undefined ) {\n\n\t\t\t\tpostRotations = postRotations.map( THREE.Math.degToRad );\n\t\t\t\tpostRotations.push( 'ZYX' );\n\n\t\t\t\tpostRotations = new THREE.Euler().fromArray( postRotations );\n\t\t\t\tpostRotations = new THREE.Quaternion().setFromEuler( postRotations ).inverse();\n\n\t\t\t}\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar euler = new THREE.Euler();\n\n\t\t\tvar quaternionValues = [];\n\n\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], 'ZYX' );\n\n\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\tif ( preRotations !== undefined ) quaternion.premultiply( preRotations );\n\t\t\t\tif ( postRotations !== undefined ) quaternion.multiply( postRotations );\n\n\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t}\n\n\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t},\n\n\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\treturn val / 100;\n\n\t\t\t} );\n\n\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t},\n\n\t\t// For all animated objects, times are defined separately for each axis\n\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\tvar times = [];\n\n\t\t\t// first join together the times for each axis, if defined\n\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t// then sort them and remove duplicates\n\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\treturn a - b;\n\n\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t} );\n\n\t\t\treturn times;\n\n\t\t},\n\n\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\tvar prevValue = initialValue;\n\n\t\t\tvar values = [];\n\n\t\t\tvar xIndex = - 1;\n\t\t\tvar yIndex = - 1;\n\t\t\tvar zIndex = - 1;\n\n\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn values;\n\n\t\t},\n\n\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t// These will be converted to quaternions which don't support values greater than\n\t\t// PI, so we'll interpolate large rotations\n\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\t// parse an FBX file in ASCII format\n\tfunction TextParser() {}\n\n\tTextParser.prototype = {\n\n\t\tconstructor: TextParser,\n\n\t\tgetPrevNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t},\n\n\t\tgetCurrentNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t},\n\n\t\tgetCurrentProp: function () {\n\n\t\t\treturn this.currentProp;\n\n\t\t},\n\n\t\tpushStack: function ( node ) {\n\n\t\t\tthis.nodeStack.push( node );\n\t\t\tthis.currentIndent += 1;\n\n\t\t},\n\n\t\tpopStack: function () {\n\n\t\t\tthis.nodeStack.pop();\n\t\t\tthis.currentIndent -= 1;\n\n\t\t},\n\n\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\tthis.currentProp = val;\n\t\t\tthis.currentPropName = name;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tthis.currentIndent = 0;\n\t\t\tconsole.log(\"FBXTree: \", FBXTree);\n\t\t\tthis.allNodes = new FBXTree();\n\t\t\tthis.nodeStack = [];\n\t\t\tthis.currentProp = [];\n\t\t\tthis.currentPropName = '';\n\n\t\t\tvar self = this;\n\n\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\tself.popStack();\n\n\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this.allNodes;\n\n\t\t},\n\n\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t} );\n\n\t\t\tvar node = { name: nodeName };\n\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t// a top node\n\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t} else { // a subnode\n\n\t\t\t\t// if the subnode already exists, append it\n\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\tthis.pushStack( node );\n\n\t\t},\n\n\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\tvar id = attrs[ 0 ];\n\n\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = '', type = '';\n\n\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t}\n\n\t\t\treturn { id: id, name: name, type: type };\n\n\t\t},\n\n\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t//\tContent: ,\n\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t}\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\tvar parentName = currentNode.name;\n\n\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Connections\n\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tpropName = 'connections';\n\t\t\t\tpropValue = [ from, to ];\n\t\t\t\tappend( propValue, rest );\n\n\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Node\n\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t// connections\n\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t} else {\n\n\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t}\n\n\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\tcurrentNode.a += line;\n\n\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t// so convert the string to an array\n\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse \"Property70\"\n\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t// split this\n\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t// into array like below\n\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t} );\n\n\t\t\tvar innerPropName = props[ 0 ];\n\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'enum':\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'ULongLong':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Color':\n\t\t\t\tcase 'ColorRGB':\n\t\t\t\tcase 'Vector3D':\n\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t},\n\n\t};\n\n\t// Parse an FBX file in Binary format\n\tfunction BinaryParser() {}\n\n\tBinaryParser.prototype = {\n\n\t\tconstructor: BinaryParser,\n\n\t\tparse: function ( buffer ) {\n\n\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\tvar version = reader.getUint32();\n\n\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\tvar allNodes = new FBXTree();\n\n\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t}\n\n\t\t\treturn allNodes;\n\n\t\t},\n\n\t\t// Check if reader has reached the end of content.\n\t\tendOfContent: function ( reader ) {\n\n\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t// - 16bytes: magic\n\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t// - 4bytes: magic\n\t\t\t// - 4bytes: version\n\t\t\t// - 120bytes: zero\n\t\t\t// - 16bytes: magic\n\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t} else {\n\n\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// recursively parse nodes until the end of the file is reached\n\t\tparseNode: function ( reader, version ) {\n\n\t\t\tvar node = {};\n\n\t\t\t// The first three data sizes depends on version.\n\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\tvar nameLen = reader.getUint8();\n\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\tvar propertyList = [];\n\n\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t}\n\n\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t// check if this node represents just a single property\n\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t}\n\n\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\treturn node;\n\n\t\t},\n\n\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t// special case: child node is single property\n\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t}\n\n\t\t\t\tnode.connections.push( array );\n\n\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t} );\n\n\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\tvar innerPropValue;\n\n\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t}\n\n\t\t\t\t// this will be copied to parent, see above\n\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseProperty: function ( reader ) {\n\n\t\t\tvar type = reader.getString( 1 );\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'C':\n\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\tcase 'D':\n\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\tcase 'F':\n\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\tcase 'I':\n\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\tcase 'L':\n\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\tcase 'R':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\tcase 'S':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\tcase 'Y':\n\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\tcase 'b':\n\t\t\t\tcase 'c':\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'f':\n\t\t\t\tcase 'i':\n\t\t\t\tcase 'l':\n\n\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tBinaryReader.prototype = {\n\n\t\tconstructor: BinaryReader,\n\n\t\tgetOffset: function () {\n\n\t\t\treturn this.offset;\n\n\t\t},\n\n\t\tsize: function () {\n\n\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t},\n\n\t\tskip: function ( length ) {\n\n\t\t\tthis.offset += length;\n\n\t\t},\n\n\t\t// seems like true/false representation depends on exporter.\n\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t// then sees LSB.\n\t\tgetBoolean: function () {\n\n\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t},\n\n\t\tgetBooleanArray: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint8: function () {\n\n\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\tthis.offset += 1;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt16: function () {\n\n\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\tthis.offset += 2;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32: function () {\n\n\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint32: function () {\n\n\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t// There's a possibility that this method returns wrong value if the value\n\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t// TODO: safely handle 64-bit integer\n\t\tgetInt64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\t// calculate negative value\n\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetInt64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\t// Note: see getInt64() comment\n\t\tgetUint64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetFloat32: function () {\n\n\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetFloat64: function () {\n\n\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\tthis.offset += 8;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\tthis.offset += size;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetString: function ( size ) {\n\n\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t}\n\n\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t}\n\n\t};\n\n\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t// and BinaryParser( FBX Binary format)\n\tfunction FBXTree() {}\n\n\tFBXTree.prototype = {\n\n\t\tconstructor: FBXTree,\n\n\t\tadd: function ( key, val ) {\n\n\t\t\tthis[ key ] = val;\n\n\t\t},\n\n\t};\n\n\t// ************** UTILITY FUNCTIONS **************\n\n\tfunction isFbxFormatBinary( buffer ) {\n\n\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t}\n\n\tfunction isFbxFormatASCII( text ) {\n\n\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\tvar cursor = 0;\n\n\t\tfunction read( offset ) {\n\n\t\t\tvar result = text[ offset - 1 ];\n\t\t\ttext = text.slice( cursor + offset );\n\t\t\tcursor ++;\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\tvar num = read( 1 );\n\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getFbxVersion( text ) {\n\n\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\tvar match = text.match( versionRegExp );\n\t\tif ( match ) {\n\n\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\treturn version;\n\n\t\t}\n\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t}\n\n\t// Converts FBX ticks into real time seconds.\n\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\treturn time / 46186158000;\n\n\t}\n\n\tvar dataArray = [];\n\n\t// extracts the data from the correct position in the FBX array based on indexing type\n\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\tvar index;\n\n\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByPolygon' :\n\t\t\t\tindex = polygonIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByVertice' :\n\t\t\t\tindex = vertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'AllSame' :\n\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t}\n\n\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\tvar from = index * infoObject.dataSize;\n\t\tvar to = from + infoObject.dataSize;\n\n\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t}\n\n\tvar tempMat = new THREE.Matrix4();\n\tvar tempEuler = new THREE.Euler();\n\tvar tempVec = new THREE.Vector3();\n\tvar translation = new THREE.Vector3();\n\tvar rotation = new THREE.Matrix4();\n\n\t// generate transformation from FBX transform data\n\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t// transformData = {\n\t//\t eulerOrder: int,\n\t//\t translation: [],\n\t//   rotationOffset: [],\n\t//\t preRotation\n\t//\t rotation\n\t//\t postRotation\n\t//   scale\n\t// }\n\t// all entries are optional\n\tfunction generateTransform( transformData ) {\n\n\t\tvar transform = new THREE.Matrix4();\n\t\ttranslation.set( 0, 0, 0 );\n\t\trotation.identity();\n\n\t\tvar order = ( transformData.eulerOrder ) ? getEulerOrder( transformData.eulerOrder ) : getEulerOrder( 0 );\n\n\t\tif ( transformData.translation ) translation.fromArray( transformData.translation );\n\t\tif ( transformData.rotationOffset ) translation.add( tempVec.fromArray( transformData.rotationOffset ) );\n\n\t\tif ( transformData.rotation ) {\n\n\t\t\tvar array = transformData.rotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\trotation.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.preRotation ) {\n\n\t\t\tvar array = transformData.preRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\trotation.premultiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.postRotation ) {\n\n\t\t\tvar array = transformData.postRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\ttempMat.getInverse( tempMat );\n\n\t\t\trotation.multiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.scale ) transform.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\ttransform.setPosition( translation );\n\t\ttransform.multiply( rotation );\n\n\t\treturn transform;\n\n\t}\n\n\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\tfunction getEulerOrder( order ) {\n\n\t\tvar enums = [\n\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t\t];\n\n\t\tif ( order === 6 ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\treturn enums[ 0 ];\n\n\t\t}\n\n\t\treturn enums[ order ];\n\n\t}\n\n\t// Parses comma separated list of numbers and returns them an array.\n\t// Used internally by the TextParser\n\tfunction parseNumberArray( value ) {\n\n\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\treturn parseFloat( val );\n\n\t\t} );\n\n\t\treturn array;\n\n\t}\n\n\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\tif ( from === undefined ) from = 0;\n\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t}\n\n\tfunction append( a, b ) {\n\n\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\tfunction slice( a, b, from, to ) {\n\n\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// inject array a2 into array a1 at index\n\tfunction inject( a1, index, a2 ) {\n\n\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t}\n\n\treturn FBXLoader;\n\n} )();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}