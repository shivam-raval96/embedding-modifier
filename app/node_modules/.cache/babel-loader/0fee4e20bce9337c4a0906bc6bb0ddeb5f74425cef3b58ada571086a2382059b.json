{"ast":null,"code":"import { bisect } from \"d3-array\";\nimport { interpolate as interpolateValue, interpolateRound } from \"d3-interpolate\";\nimport { map, slice } from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\nvar unit = [0, 1];\nexport function deinterpolateLinear(a, b) {\n  return (b -= a = +a) ? function (x) {\n    return (x - a) / b;\n  } : constant(b);\n}\nfunction deinterpolateClamp(deinterpolate) {\n  return function (a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function (x) {\n      return x <= a ? 0 : x >= b ? 1 : d(x);\n    };\n  };\n}\nfunction reinterpolateClamp(reinterpolate) {\n  return function (a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function (t) {\n      return t <= 0 ? a : t >= 1 ? b : r(t);\n    };\n  };\n}\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0],\n    d1 = domain[1],\n    r0 = range[0],\n    r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function (x) {\n    return r0(d0(x));\n  };\n}\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n    d = new Array(j),\n    r = new Array(j),\n    i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n  return function (x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\nexport function copy(source, target) {\n  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());\n}\n\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n    range = unit,\n    interpolate = interpolateValue,\n    clamp = false,\n    piecewise,\n    output,\n    input;\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n  scale.invert = function (y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n  scale.domain = function (_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n  scale.range = function (_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n  scale.rangeRound = function (_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n  scale.clamp = function (_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n  scale.interpolate = function (_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n  return rescale();\n}","map":{"version":3,"names":["bisect","interpolate","interpolateValue","interpolateRound","map","slice","constant","number","unit","deinterpolateLinear","a","b","x","deinterpolateClamp","deinterpolate","d","reinterpolateClamp","reinterpolate","r","t","bimap","domain","range","d0","d1","r0","r1","polymap","j","Math","min","length","Array","i","reverse","copy","source","target","clamp","continuous","piecewise","output","input","rescale","scale","invert","y","_","arguments","call","rangeRound"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/embedding-modifier/app/node_modules/d3fc-label-layout/node_modules/d3-scale/src/continuous.js"],"sourcesContent":["import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function deinterpolateLinear(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(b);\n}\n\nfunction deinterpolateClamp(deinterpolate) {\n  return function(a, b) {\n    var d = deinterpolate(a = +a, b = +b);\n    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };\n  };\n}\n\nfunction reinterpolateClamp(reinterpolate) {\n  return function(a, b) {\n    var r = reinterpolate(a = +a, b = +b);\n    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };\n  };\n}\n\nfunction bimap(domain, range, deinterpolate, reinterpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);\n  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, deinterpolate, reinterpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = deinterpolate(domain[i], domain[i + 1]);\n    r[i] = reinterpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp());\n}\n\n// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].\nexport default function continuous(deinterpolate, reinterpolate) {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      clamp = false,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);\n  }\n\n  scale.invert = function(y) {\n    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = !!_, rescale()) : clamp;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  return rescale();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}